<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WB.Commons</name>
    </assembly>
    <members>
        <member name="T:WB.Commons.Helpers.Extensions">
            <summary>
            Class Extensions
            </summary>
        </member>
        <member name="M:WB.Commons.Helpers.Extensions.Deserialize``1(System.Byte[])">
            <summary>
            Deserializes the specified buffer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="buffer">The buffer.</param>
            <returns>``0.</returns>
        </member>
        <member name="M:WB.Commons.Helpers.Extensions.Deserialize``1(System.Byte[],``0@)">
            <summary>
            Deserializes the specified buffer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="buffer">The buffer.</param>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:WB.Commons.Helpers.Extensions.DeserializeFromXml``1(System.String,System.Text.Encoding)">
            <summary>
            Deserializes from XML.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xmlString">The XML string.</param>
            <returns>``0.</returns>
        </member>
        <member name="M:WB.Commons.Helpers.Extensions.DeserializeFromXml``1(System.String,``0@,System.Text.Encoding)">
            <summary>
            Deserializes from XML.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xmlString">The XML string.</param>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:WB.Commons.Helpers.Extensions.DeserializeFromXml``1(``0,System.String,System.Text.Encoding)">
            <summary>
            Deserializes from XML.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The obj.</param>
            <param name="xmlString">The XML string.</param>
            <returns>``0.</returns>
        </member>
        <member name="M:WB.Commons.Helpers.Extensions.DeserializeFromXml``1(``0,System.String,System.Xml.Serialization.XmlSerializer,System.Text.Encoding)">
            <summary>
            Deserializes from XML.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The obj.</param>
            <param name="xmlString">The XML string.</param>
            <param name="serializer">The XML serializer</param>
            <returns>``0.</returns>
        </member>
        <member name="M:WB.Commons.Helpers.Extensions.FindSerializer(System.String,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean,System.Boolean)">
            <summary>
            Finds the serializer for the specified type name string
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns>XmlSerializer.</returns>
        </member>
        <member name="M:WB.Commons.Helpers.Extensions.Params2Xml``1(``0)">
            <summary>
            Params2s the XML.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The obj.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:WB.Commons.Helpers.Extensions.Serialize``1(System.Object)">
            <summary>
            Serializes the specified obj.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The obj.</param>
            <returns>System.Byte[][].</returns>
        </member>
        <member name="M:WB.Commons.Helpers.Extensions.SerializeToXml``1(``0,System.Xml.XmlWriterSettings)">
            <summary>
            Serializes to XML.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="settings">The settings.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:WB.Commons.Helpers.Extensions.SerializeToXml``1(``0,System.IO.StreamWriter)">
            <summary>
            Serializes to XML.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="sw">The sw.</param>
        </member>
        <member name="M:WB.Commons.Helpers.Extensions.Slice(System.String,System.Int32,System.Int32)">
            <summary>
            Get the string slice between the two indexes.
            Inclusive for start index, exclusive for end index.
            </summary>
            <param name="source">The source.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:WB.Commons.Helpers.Extensions.Slice``1(``0[],System.Int32,System.Int32)">
            <summary>
            Slices the specified source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="start">The start.</param>
            <param name="count">The count.</param>
            <returns>``0[][].</returns>
            <exception cref="T:System.IndexOutOfRangeException">start
            or
            start + count</exception>
        </member>
        <member name="M:WB.Commons.Helpers.Extensions.Xml2Params``1(``0,System.String)">
            <summary>
            XML2s the params.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The obj.</param>
            <param name="xmlobj">The xmlobj.</param>
            <returns>``0.</returns>
        </member>
        <member name="T:WB.Commons.Helpers.Misc">
            <summary>
            Class Misc
            </summary>
        </member>
        <member name="M:WB.Commons.Helpers.Misc.AssQualNameSplit(System.String)">
            <summary>
            Asses the qual name split.
            </summary>
            <param name="aqname">The aqname.</param>
            <returns>AssemblyInfo.</returns>
        </member>
        <member name="M:WB.Commons.Helpers.Misc.CheckEquals``1(``0,System.Object)">
            <summary>
            Checks equality between two generic objects
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The obj.</param>
            <param name="objcomp">The objcomp.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:WB.Commons.Helpers.Misc.DisplayString(System.Object,System.String,System.Int32)">
            <summary>
            Create a textual representation of an object
            </summary>
            <param name="obj">Object to textualize</param>
            <param name="name">Name of the object</param>
            <param name="indent">Current indent level</param>
            <returns>The string representing the object</returns>
        </member>
        <member name="M:WB.Commons.Helpers.Misc.GetAssemblyName(System.String)">
            <summary>
            Gets the name of the assembly.
            </summary>
            <param name="aqname">The aqname.</param>
            <returns>AssemblyName.</returns>
        </member>
        <member name="M:WB.Commons.Helpers.Misc.IsCollection(System.Type)">
            <summary>
            Determines whether the specified t is collection.
            </summary>
            <param name="t">The t.</param>
            <returns><c>true</c> if the specified t is collection; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:WB.Commons.Helpers.Misc.IsDictionary(System.Type)">
            <summary>
            Determines whether the specified t is dictionary.
            </summary>
            <param name="t">The t.</param>
            <returns><c>true</c> if the specified t is dictionary; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:WB.Commons.Helpers.Misc.SerializationTest``1(``0)">
            <summary>
            Serializations the test.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="graph">The graph.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:WB.Commons.Helpers.Misc.SerializeToXml(System.Object)">
            <summary>
            Serializes to XML.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:WB.Commons.Helpers.Misc.Swap``1(``0@,``0@)">
            <summary>
            Swaps the specified t1.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t1">The t1.</param>
            <param name="t2">The t2.</param>
        </member>
        <member name="M:WB.Commons.Helpers.Misc.XmlSerializationTest``1(``0)">
            <summary>
            XMLs the serialization test.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="graph">The graph.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="T:WB.Commons.Helpers.Misc.AssemblyInfo">
            <summary>
            Struct AssemblyInfo
            </summary>
        </member>
        <member name="P:WB.Commons.Helpers.Misc.AssemblyInfo.Assembly">
            <summary>
            Gets or sets the assembly.
            </summary>
            <value>The assembly.</value>
        </member>
        <member name="P:WB.Commons.Helpers.Misc.AssemblyInfo.Culture">
            <summary>
            Gets or sets the culture.
            </summary>
            <value>The culture.</value>
        </member>
        <member name="P:WB.Commons.Helpers.Misc.AssemblyInfo.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:WB.Commons.Helpers.Misc.AssemblyInfo.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>The token.</value>
        </member>
        <member name="P:WB.Commons.Helpers.Misc.AssemblyInfo.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="M:WB.Commons.Helpers.Network.GetIps">
            <summary>
            Ritorna una lista degli ip presenti nella LAN
            </summary>
            <returns>Lista degli IP nella LAN</returns>
        </member>
        <member name="M:WB.Commons.Helpers.Network.GetMachines(System.String)">
            <summary>
            Ritorna una lista delle macchine sulla rete
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:WB.Commons.Helpers.Regex">
            <summary>
            Class Regex
            </summary>
        </member>
        <member name="M:WB.Commons.Helpers.Regex.RegexComplexity(System.Text.RegularExpressions.Regex)">
            <summary>
            Evaluates complexity of a Regex
            </summary>
            <param name="regex">The regex.</param>
            <returns>System.Decimal.</returns>
        </member>
        <member name="M:WB.Commons.Helpers.Regex.WCard2Regex(System.String,System.Boolean)">
            <summary>
            Return a Regex object from a string with wildcards
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="ignorecase">if set to <c>true</c> [ignorecase].</param>
            <returns>System.Text.RegularExpressions.Regex.</returns>
        </member>
        <member name="T:WB.Commons.Helpers.SerializerInfo">
            <summary>
            Class SerializerInfoEx
            </summary>
        </member>
        <member name="F:WB.Commons.Helpers.SerializerInfo.registeredTypes">
            <summary>
            The registered types
            </summary>
        </member>
        <member name="F:WB.Commons.Helpers.SerializerInfo._instance">
            <summary>
            The _instance
            </summary>
        </member>
        <member name="M:WB.Commons.Helpers.SerializerInfo.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:WB.Commons.Helpers.SerializerInfo"/> class from being created.
            </summary>
        </member>
        <member name="P:WB.Commons.Helpers.SerializerInfo.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="P:WB.Commons.Helpers.SerializerInfo.RegisteredTypes">
            <summary>
            Gets the registered types list 
            </summary>
        </member>
        <member name="M:WB.Commons.Helpers.SerializerInfo.XmlInclude(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            
            </summary>
            <param name="typesToInclude"></param>
        </member>
        <member name="M:WB.Commons.Helpers.SerializerInfo.IsRegistered(System.Type)">
            <summary>
            Determines whether the specified t is registered.
            </summary>
            <param name="t">The t.</param>
            <returns><c>true</c> if the specified t is registered; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:WB.Commons.Helpers.SerializerInfo.RegisterBatch(System.Collections.Generic.IEnumerable{System.Type},System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Registers all the types derived from a based type searching in a collection of assemblies
            </summary>
            <param name="baseTypes">The base types.</param>
            <param name="assemblies">The assemblies.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:WB.Commons.Helpers.SerializerInfo.RegisterType(System.Type,System.Type)">
            <summary>
            Registers the type.
            </summary>
            <param name="typeToRegister">The type to register.</param>
            <param name="baseType">Type of the base.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:WB.Commons.Helpers.SerializerInfo.RegisterTypes(System.Collections.Generic.IEnumerable{System.Type},System.Type)">
            <summary>
            Registers the types.
            </summary>
            <param name="types">The types.</param>
            <param name="baseType">Type of the base.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:WB.Commons.Helpers.SerializerInfo.UnRegisterType(System.Type)">
            <summary>
            Uns the type of the register.
            </summary>
            <param name="t">The t.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:WB.Commons.Helpers.SerializerInfo.UnregisterTypes(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Unregisters the types.
            </summary>
            <param name="types">The types.</param>
            <returns>IEnumerable{System.Boolean}.</returns>
        </member>
        <member name="M:WB.Commons.Helpers.SerializerInfo.GetXmlSerializer(System.String)">
            <summary>
            Ritorna il serializer del messaggio corrispondente
            </summary>
            <param name="type">The type.</param>
            <returns>System.Xml.Serialization.XmlSerializer.</returns>
        </member>
        <member name="T:WB.Commons.Helpers.SerializerInfoExBase">
            <summary>
            Class SerializerInfo
            </summary>
        </member>
        <member name="F:WB.Commons.Helpers.SerializerInfoExBase.registeredTypes">
            <summary>
            The registered types
            </summary>
        </member>
        <member name="F:WB.Commons.Helpers.SerializerInfoExBase._instance">
            <summary>
            The _instance
            </summary>
        </member>
        <member name="M:WB.Commons.Helpers.SerializerInfoExBase.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:WB.Commons.Helpers.SerializerInfoExBase"/> class from being created.
            </summary>
        </member>
        <member name="P:WB.Commons.Helpers.SerializerInfoExBase.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="M:WB.Commons.Helpers.SerializerInfoExBase.XmlInclude(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            
            </summary>
            <param name="typesToInclude"></param>
        </member>
        <member name="M:WB.Commons.Helpers.SerializerInfoExBase.IsRegistered(System.Type)">
            <summary>
            Determines whether the specified t is registered.
            </summary>
            <param name="t">The t.</param>
            <returns><c>true</c> if the specified t is registered; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:WB.Commons.Helpers.SerializerInfoExBase.RegisterBatch(System.Collections.Generic.IEnumerable{System.Type},System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Registers all the types derived from a based type searching in a collection of assemblies
            </summary>
            <param name="baseTypes">The base types.</param>
            <param name="assemblies">The assemblies.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:WB.Commons.Helpers.SerializerInfoExBase.RegisterType(System.Type,System.Type)">
            <summary>
            Registers the type.
            </summary>
            <param name="typeToRegister">The type to register.</param>
            <param name="baseType">Type of the base.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:WB.Commons.Helpers.SerializerInfoExBase.RegisterTypes(System.Collections.Generic.IEnumerable{System.Type},System.Type)">
            <summary>
            Registers the types.
            </summary>
            <param name="types">The types.</param>
            <param name="baseType">Type of the base.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:WB.Commons.Helpers.SerializerInfoExBase.UnRegisterType(System.Type)">
            <summary>
            Uns the type of the register.
            </summary>
            <param name="t">The t.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:WB.Commons.Helpers.SerializerInfoExBase.UnregisterTypes(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Unregisters the types.
            </summary>
            <param name="types">The types.</param>
            <returns>IEnumerable{System.Boolean}.</returns>
        </member>
        <member name="M:WB.Commons.Helpers.SerializerInfoExBase.GetSerializeTypeByXmlTag(System.Xml.XmlReader,System.String)">
            <summary>
            Ritorna il valore del tag xml specificato
            </summary>
            <param name="xmlReader">The XML reader.</param>
            <param name="xmlTag">The XML tag.</param>
            <returns>System.String.</returns>
            <remarks>Da sovrascrivere nelle classi derivate</remarks>
        </member>
        <member name="M:WB.Commons.Helpers.SerializerInfoExBase.GetXmlSerializer(System.String)">
            <summary>
            Ritorna il serializer del messaggio corrispondente
            </summary>
            <param name="type">The type.</param>
            <returns>System.Xml.Serialization.XmlSerializer.</returns>
        </member>
        <member name="T:WB.Commons.Helpers.TypesLoader">
            <summary>
            Helper static class that uses reflection to load all instances of a given type
            scanning the referenced assemblies, and stores them in a dictionary
            </summary>
        </member>
        <member name="F:WB.Commons.Helpers.TypesLoader.Types">
            <summary>
            The types
            </summary>
        </member>
        <member name="F:WB.Commons.Helpers.TypesLoader.nonSysAssemblies">
            <summary>
            The non sys assemblies
            </summary>
        </member>
        <member name="M:WB.Commons.Helpers.TypesLoader.GetNonSysAssemblies(System.Boolean)">
            <summary>
            Retrieves a collection of non system assemblies referenced by the current app domain
            </summary>
            <param name="rescan">if set to <c>true</c> [rescan].</param>
            <returns>IEnumerable{Assembly}.</returns>
        </member>
        <member name="M:WB.Commons.Helpers.TypesLoader.GetType(System.String,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean,System.Boolean)">
            <summary>
            Retrieves a type by type name searching in the app domain assemblies or in a collection of assemblies passed
            </summary>
            <param name="typeName">the typename to search, can be either the type's fullname or the assemblyqualified name</param>
            <param name="assemblies">list of assemblies to search into, defaults to current app domain's assemblies</param>
            <param name="onlyNonSysAssemblies">if true the search is performed only on non system assemblies</param>
            <returns>Type.</returns>
        </member>
        <member name="M:WB.Commons.Helpers.TypesLoader.GetTypes(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
            Gets the types.
            </summary>
            <param name="baseclass">The baseclass.</param>
            <param name="assemblies">The assemblies.</param>
            <param name="forcerescan">if set to <c>true</c> [forcerescan].</param>
            <returns>List{Type}.</returns>
        </member>
        <member name="T:WB.Commons.Helpers.TypesLoader.ProxyDomain">
            <summary>
            Class ProxyDomain
            </summary>
        </member>
        <member name="F:WB.Commons.Helpers.TypesLoader.ProxyDomain.proxy">
            <summary>
            The proxy
            </summary>
        </member>
        <member name="M:WB.Commons.Helpers.TypesLoader.ProxyDomain.LoadAssembly(System.Reflection.AssemblyName)">
            <summary>
            Loads the assembly.
            </summary>
            <param name="aname">The aname.</param>
            <returns>Assembly.</returns>
        </member>
        <member name="M:WB.Commons.Helpers.TypesLoader.ProxyDomain.GetAssembly(System.Reflection.AssemblyName)">
            <summary>
            Gets the assembly.
            </summary>
            <param name="aname">The aname.</param>
            <returns>Assembly.</returns>
        </member>
        <member name="T:WB.Commons.Helpers.Factory`1">
            <summary>
            Class Factory
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:WB.Commons.Helpers.Factory`1.CreateInstance">
            <summary>
            Creates the instance.
            </summary>
            <returns>`0.</returns>
        </member>
        <member name="T:WB.Commons.Helpers.FactoryWithParams`1">
            <summary>
            Class FactoryWithParams
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:WB.Commons.Helpers.FactoryWithParams`1.assemblies">
            <summary>
            The assemblies
            </summary>
        </member>
        <member name="M:WB.Commons.Helpers.FactoryWithParams`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WB.Commons.Helpers.FactoryWithParams`1" /> class.
            </summary>
        </member>
        <member name="M:WB.Commons.Helpers.FactoryWithParams`1.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Initializes a new instance of the <see cref="T:WB.Commons.Helpers.FactoryWithParams`1" /> class.
            </summary>
            <param name="_assemblies">The _assemblies.</param>
        </member>
        <member name="M:WB.Commons.Helpers.FactoryWithParams`1.CreateInstance(System.Object[])">
            <summary>
            Creates the instance.
            </summary>
            <param name="parms">The parms.</param>
            <returns>`0.</returns>
        </member>
        <member name="T:WB.Commons.Helpers.LoopWorker">
            <summary>
            Esegue a loop un'attività asincrona
            </summary>
        </member>
        <member name="E:WB.Commons.Helpers.LoopWorker.OnDisposed">
            <summary>
            Occurs when [on disposed].
            </summary>
        </member>
        <member name="E:WB.Commons.Helpers.LoopWorker.OnLoop">
            <summary>
            Occurs when [on loop].
            </summary>
        </member>
        <member name="F:WB.Commons.Helpers.LoopWorker.gcThread">
            <summary>
            The gc thread
            </summary>
        </member>
        <member name="M:WB.Commons.Helpers.LoopWorker.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:WB.Commons.Helpers.LoopWorker" /> class.
            </summary>
            <param name="polling">The polling.</param>
        </member>
        <member name="P:WB.Commons.Helpers.LoopWorker.IsAlive">
            <summary>
            Gets or sets a value indicating whether this instance is alive.
            </summary>
            <value><c>true</c> if this instance is alive; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WB.Commons.Helpers.LoopWorker.Polling">
            <summary>
            Gets or sets the polling.
            </summary>
            <value>The polling.</value>
        </member>
        <member name="M:WB.Commons.Helpers.LoopWorker.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WB.Commons.Helpers.LoopWorker.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:WB.Commons.Helpers.LoopWorker.Start(System.TimeSpan)">
            <summary>
            Starts the specified polling.
            </summary>
            <param name="polling">The polling.</param>
        </member>
        <member name="M:WB.Commons.Helpers.LoopWorker.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:WB.Commons.Helpers.LoopWorker.doLoop">
            <summary>
            Does the loop.
            </summary>
        </member>
        <member name="T:WB.Commons.Helpers.MessageLogDispatcher">
            <summary>
            Class MessageLogDispatcher
            </summary>
        </member>
        <member name="E:WB.Commons.Helpers.MessageLogDispatcher.onLog1">
            <summary>
            Occurs when [on log1].
            </summary>
        </member>
        <member name="E:WB.Commons.Helpers.MessageLogDispatcher.onLog2">
            <summary>
            Occurs when [on log2].
            </summary>
        </member>
        <member name="T:WB.Commons.Helpers.MessageLogDispatcher.dLog1">
            <summary>
            Delegate dLog1
            </summary>
            <param name="level">The level.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:WB.Commons.Helpers.MessageLogDispatcher.dLog2">
            <summary>
            Delegate dLog2
            </summary>
            <param name="level">The level.</param>
            <param name="caller">The caller.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:WB.Commons.Helpers.MessageLogDispatcher.LogLevel">
            <summary>
            Imposta o Ritorna il livello di Log corrente
            </summary>
            <value>The log level.</value>
        </member>
        <member name="M:WB.Commons.Helpers.MessageLogDispatcher.CanLog(WB.IIIParty.Commons.Logger.LogLevels)">
            <summary>
            Ritorna se il livello di log specificato è abilitato
            </summary>
            <param name="level">Livello di Log</param>
            <returns><c>true</c> if this instance can log the specified level; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:WB.Commons.Helpers.MessageLogDispatcher.Log(WB.IIIParty.Commons.Logger.LogLevels,System.String)">
            <summary>
            Inserisce un messaggio di log
            </summary>
            <param name="level">Livello del log</param>
            <param name="message">Messaggio di log</param>
        </member>
        <member name="M:WB.Commons.Helpers.MessageLogDispatcher.Log(WB.IIIParty.Commons.Logger.LogLevels,System.Object,System.String)">
            <summary>
            Inserisce un messaggio di log
            </summary>
            <param name="level">Livello del log</param>
            <param name="caller">Oggetto chiamante la funzione di log</param>
            <param name="message">Messaggio di log</param>
        </member>
        <member name="M:WB.Commons.Helpers.MessageLogDispatcher.Register(WB.IIIParty.Commons.Logger.IMessageLog)">
            <summary>
            Registers the specified logger.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:WB.Commons.Helpers.MessageLogDispatcher.UnRegister(WB.IIIParty.Commons.Logger.IMessageLog)">
            <summary>
            Uns the register.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="T:WB.Commons.Loggers.TxtTraceLog">
            <summary>
            Class TxtTraceLog
            </summary>
        </member>
        <member name="F:WB.Commons.Loggers.TxtTraceLog.parser">
            <summary>
            The parser
            </summary>
        </member>
        <member name="F:WB.Commons.Loggers.TxtTraceLog.wr">
            <summary>
            The wr
            </summary>
        </member>
        <member name="M:WB.Commons.Loggers.TxtTraceLog.#ctor(WB.IIIParty.Commons.Protocol.IMessageParser)">
            <summary>
            Initializes a new instance of the <see cref="T:WB.Commons.Loggers.TxtTraceLog"/> class.
            </summary>
            <param name="_parser">The _parser.</param>
        </member>
        <member name="M:WB.Commons.Loggers.TxtTraceLog.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:WB.Commons.Loggers.TxtTraceLog.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WB.Commons.Loggers.TxtTraceLog.Log(System.String,System.String,System.Byte[],WB.IIIParty.Commons.Logger.TraceDirections,System.String,WB.IIIParty.Commons.Logger.PrintTypeByteArray)">
            <summary>
            Inserisce un log di un flusso di dati
            </summary>
            <param name="_currentDevice">Dispositivo locale</param>
            <param name="_remoteDevice">Dispositivo remoto</param>
            <param name="_data">Dati da storicizzare</param>
            <param name="_direction">Direzione dei dati rispetto al Dispositivo locale</param>
            <param name="_description">Descrizione aggiuntiva</param>
            <param name="_printTypeByteArray">Formattazione di stampa</param>
        </member>
        <member name="M:WB.Commons.Loggers.TxtTraceLog.Open(System.String)">
            <summary>
            Opens the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="T:WB.Commons.Net.Bin.ABaseClient`1">
            <summary>
            Classe base per l'implementazione di un Client in un dato protocollo
            </summary>
            <typeparam name="TSrvParser">Rappresenta il message parser nel protocollo specifico per interpretare i messaggi del server</typeparam>
        </member>
        <member name="F:WB.Commons.Net.Bin.ABaseClient`1.cliParser">
            <summary>
            The cli parser
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Bin.ABaseClient`1.clientTcp">
            <summary>
            The client TCP
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Bin.ABaseClient`1.logAction">
            <summary>
            The log action
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Bin.ABaseClient`1.onConnect">
            <summary>
            The on connect
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Bin.ABaseClient`1.onConnectFailure">
            <summary>
            The on connect failure
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Bin.ABaseClient`1.onDisConnect">
            <summary>
            The on dis connect
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Bin.ABaseClient`1.onTrace">
            <summary>
            The on trace
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Bin.ABaseClient`1.sp">
            <summary>
            The sp
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Bin.ABaseClient`1.srvParser">
            <summary>
            The SRV parser
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseClient`1.#ctor(WB.Commons.Net.Bin.Interfaces.ICliConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:WB.Commons.Net.Bin.ABaseClient`1"/> class.
            </summary>
            <param name="config">The config.</param>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseClient`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WB.Commons.Net.Bin.ABaseClient`1"/> class.
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseClient`1.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WB.Commons.Net.Bin.ABaseClient`1"/> class.
            </summary>
            <param name="_ip">The _ip.</param>
            <param name="_port">The _port.</param>
        </member>
        <member name="P:WB.Commons.Net.Bin.ABaseClient`1.IP">
            <summary>
            Gets or sets the IP.
            </summary>
            <value>The IP.</value>
        </member>
        <member name="P:WB.Commons.Net.Bin.ABaseClient`1.Port">
            <summary>
            Gets or sets the port.
            </summary>
            <value>The port.</value>
        </member>
        <member name="P:WB.Commons.Net.Bin.ABaseClient`1.Trace">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:WB.Commons.Net.Bin.ABaseClient`1"/> is trace.
            </summary>
            <value><c>true</c> if trace; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WB.Commons.Net.Bin.ABaseClient`1.Log">
            <summary>
            Gets or sets the log.
            </summary>
            <value>The log.</value>
        </member>
        <member name="P:WB.Commons.Net.Bin.ABaseClient`1.LogAction">
            <summary>
            Gets the log action.
            </summary>
            <value>The log action.</value>
        </member>
        <member name="P:WB.Commons.Net.Bin.ABaseClient`1.ClientTcp">
            <summary>
            Gets the client TCP.
            </summary>
            <value>The client TCP.</value>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseClient`1.onAnswerToMessage">
            <summary>
            Occurs when [on answer to message].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseClient`1.OnAnswerToMessage">
            <summary>
            Evento lanciato in risposta ad un messaggio lato server; il delegate associato prende in input
            l'<see cref="T:WB.IIIParty.Commons.Protocol.IMessage" /> dal server e deve ritornare l'<see cref="T:WB.IIIParty.Commons.Protocol.IMessage" /> di risposta
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseClient`1.onSendMessage">
            <summary>
            Occurs when [on send message].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseClient`1.OnSendMessage">
            <summary>
            Evento all'invio di un <see cref="T:WB.IIIParty.Commons.Protocol.IMessage" /> verso i lserver
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseClient`1.SendMessage(WB.IIIParty.Commons.Protocol.IMessage)">
            <summary>
            Invia un <see cref="T:WB.IIIParty.Commons.Protocol.IMessage" /> al server
            </summary>
            <param name="imsg"><see cref="T:WB.IIIParty.Commons.Protocol.IMessage" /> da inviare</param>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseClient`1.onSendMessageAsync">
            <summary>
            Occurs when [on send message async].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseClient`1.OnSendMessageAsync">
            <summary>
            Evento lanciato all'invio di un messaggio asincrono
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseClient`1.SendMessageAsync(WB.IIIParty.Commons.Protocol.IMessage,WB.IIIParty.Commons.Protocol.dAsyncCallback,System.Object)">
            <summary>
            Sends the message async.
            </summary>
            <param name="imsg">The imsg.</param>
            <param name="cback">The cback.</param>
            <param name="parm">The parm.</param>
            <returns>ASyncResult.</returns>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseClient`1.onSendMessageSync">
            <summary>
            Occurs when [on send message sync].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseClient`1.OnSendMessageSync">
            <summary>
            Evento lanciato all'invio di un messaggio sincrono
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseClient`1.SendMessageSync(WB.IIIParty.Commons.Protocol.IMessage,System.Collections.Generic.List{WB.IIIParty.Commons.Protocol.IMessage}@,System.Collections.Generic.List{WB.IIIParty.Commons.Protocol.MessageValidationException}@)">
            <summary>
            Sends the message sync.
            </summary>
            <param name="imsg">The imsg.</param>
            <param name="msgout">The msgout.</param>
            <param name="vEx">The v ex.</param>
            <returns>SyncResult.</returns>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseClient`1.OnConnect">
            <summary>
            Evento lanciato all'avvenuta connessione
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseClient`1.OnDisConnect">
            <summary>
            Evento lanciato all'avvenuta disconnessione
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseClient`1.OnTrace">
            <summary>
            Occurs when [on trace].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseClient`1.OnConnectFailure">
            <summary>
            Evento lanciato in caso di fallimento della connessione
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseClient`1.onCreateClientTcp">
            <summary>
            Occurs when [on create client TCP].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseClient`1.OnCreateClientTcp">
            <summary>
            Evento lanciato alla creazione del client TCP
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseClient`1.CreateClientTcp">
            <summary>
            Crea un nuovo TcpClient, cabla gli eventi ed abilita la connessione
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseClient`1.CreateClientTcp(System.String,System.String)">
            <summary>
            Crea un nuovo TcpClient, cabla gli eventi ed abilita la connessione
            </summary>
            <param name="_ip">IP del server</param>
            <param name="_port">Porta del server</param>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseClient`1.onDisposeClientTcp">
            <summary>
            Occurs when [on dispose client TCP].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseClient`1.OnDisposeClientTcp">
            <summary>
            Evento lanciato alla distruzione del client TCP
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseClient`1.DisposeClientTcp">
            <summary>
            Distrugge il TcpClient
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseClient`1.client_OnTrace(WB.IIIParty.Commons.Protocol.IStream,WB.IIIParty.Commons.Protocol.TraceDirections,System.Byte[],System.String)">
            <summary>
            Client_s the on trace.
            </summary>
            <param name="sender">The sender.</param>
            <param name="direction">The direction.</param>
            <param name="data">The data.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseClient`1.client_OnDisconnect">
            <summary>
            Client_s the on disconnect.
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseClient`1.client_OnConnect">
            <summary>
            Client_s the on connect.
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseClient`1.client_DataReceived(System.Byte[])">
            <summary>
            Client_s the data received.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseClient`1.client_ConnectFailure">
            <summary>
            Client_s the connect failure.
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseClient`1.sp_OnError(System.Exception)">
            <summary>
            SP_s the on error.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseClient`1.sp_OnMessageParseError(WB.IIIParty.Commons.Protocol.MessageParseException)">
            <summary>
            SP_s the on message parse error.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseClient`1.sp_MessageReceived(WB.IIIParty.Commons.Protocol.IMessage,WB.IIIParty.Commons.Protocol.MessageValidationException)">
            <summary>
            SP_s the message received.
            </summary>
            <param name="msg">The MSG.</param>
            <param name="error">The error.</param>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseClient`1.onStreamParseError">
            <summary>
            Occurs when [on stream parse error].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseClient`1.OnStreamParseError">
            <summary>
            Evento lanciato in caso di un'eccezione generica lanciata dallo streamparser
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseClient`1.onMessageParseError">
            <summary>
            Occurs when [on message parse error].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseClient`1.OnMessageParseError">
            <summary>
            Evento lanciato in caso di errore di parsing di un IMessage
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseClient`1.messageReceived">
            <summary>
            Occurs when [message received].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseClient`1.MessageReceived">
            <summary>
            Evento lanciato quando lo streamparser riceve un IMessage
            Va inserito nell'implementazione del OnTcpClientCreate
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseClient`1.dataReceived">
            <summary>
            Occurs when [data received].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseClient`1.DataReceived">
            <summary>
            Evento lanciato quando il TcpClient riceve un byte[]
            Va inserito nell'implementazione del OnTcpClientCreate
            </summary>
        </member>
        <member name="P:WB.Commons.Net.Bin.ABaseClient`1.IsEnabled">
            <summary>
            Gets a value indicating whether this instance is enabled.
            </summary>
            <value><c>true</c> if this instance is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:WB.Commons.Net.Bin.ConnectionFactory`1">
            <summary>
            Class ConnectionFactory
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:WB.Commons.Net.Bin.ConnectionFactory`1.CreateInstance(WB.IIIParty.Commons.Net.Sockets.TcpServerConnection,WB.IIIParty.Commons.Protocol.IMessageParser@,System.Action{System.String},System.Int64)">
            <summary>
            Creates the instance.
            </summary>
            <param name="conn">The conn.</param>
            <param name="parser">The parser.</param>
            <param name="strAct">The STR act.</param>
            <param name="timeout">The timeout.</param>
            <returns>`0.</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:WB.Commons.Net.Bin.ABaseConnection">
            <summary>
            Classe base per l'implementazione di una Server Connection in un generico protocollo
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Bin.ABaseConnection.connection">
            <summary>
            The connection
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Bin.ABaseConnection.inparser">
            <summary>
            da inizializzare nella classe derivata
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Bin.ABaseConnection.outparser">
            <summary>
            da inizializzare nella classe derivata
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Bin.ABaseConnection.sp">
            <summary>
            da inizializzare nella classe derivata
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Bin.ABaseConnection.trace">
            <summary>
            The trace
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseConnection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WB.Commons.Net.Bin.ABaseConnection"/> class.
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseConnection.#ctor(WB.IIIParty.Commons.Net.Sockets.TcpServerConnection,WB.IIIParty.Commons.Protocol.IMessageParser,System.Action{System.String},System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:WB.Commons.Net.Bin.ABaseConnection"/> class.
            </summary>
            <param name="conn">The conn.</param>
            <param name="parser">The parser.</param>
            <param name="strAct">The STR act.</param>
            <param name="msTimeout">The ms timeout.</param>
        </member>
        <member name="P:WB.Commons.Net.Bin.ABaseConnection.TimeOut">
            <summary>
            Gets or sets the time out.
            </summary>
            <value>The time out.</value>
        </member>
        <member name="P:WB.Commons.Net.Bin.ABaseConnection.Connection">
            <summary>
            Restituisce la connessione
            </summary>
            <value>The connection.</value>
        </member>
        <member name="P:WB.Commons.Net.Bin.ABaseConnection.Inparser">
            <summary>
            da inizializzare nella classe derivata
            una volta inizializzato viene creato in automatico lo streamparser
            </summary>
            <value>The inparser.</value>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="P:WB.Commons.Net.Bin.ABaseConnection.Outparser">
            <summary>
            Gets or sets the outparser.
            </summary>
            <value>The outparser.</value>
        </member>
        <member name="P:WB.Commons.Net.Bin.ABaseConnection.Sp">
            <summary>
            Gets or sets the sp.
            </summary>
            <value>The sp.</value>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="P:WB.Commons.Net.Bin.ABaseConnection.Trace">
            <summary>
            Abilita o disabilita il trace
            </summary>
            <value><c>true</c> if trace; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:WB.Commons.Net.Bin.ABaseConnection.logAction">
            <summary>
            The log action
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Bin.ABaseConnection.onDisconnect">
            <summary>
            The on disconnect
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Bin.ABaseConnection.onTrace">
            <summary>
            The on trace
            </summary>
        </member>
        <member name="P:WB.Commons.Net.Bin.ABaseConnection.LogAction">
            <summary>
            Permette di impostare un metodo custom che accetti come parametro una stringa (metodo di log)
            Viene invocato dagli eventi relativi agli IMessage per visualizzare il messaggio in formato testuale
            </summary>
            <value>The log action.</value>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseConnection.OnTrace">
            <summary>
            Permette di specificare uno o piu` metodi custom richiamati quando viene sollevato l'evento di trace
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseConnection.OnDisconnect">
            <summary>
            Occurs when [on disconnect].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseConnection.onMessageParseError">
            <summary>
            Occurs when [on message parse error].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseConnection.OnMessageParseError">
            <summary>
            Occurs when [on message parse error].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseConnection.onError">
            <summary>
            Occurs when [on error].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseConnection.OnError">
            <summary>
            Occurs when [on error].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseConnection.onMessageReceived">
            <summary>
            Occurs when [on message received].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseConnection.OnMessageReceived">
            <summary>
            Permette di specificare uno o piu` metodi custom richiamati quando viene ricevuto un IMessage
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseConnection.onDataReceived">
            <summary>
            Occurs when [on data received].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseConnection.OnDataReceived">
            <summary>
            Permette di specificare uno o piu` metodi custom richiamati quando viene sollevato l'evento di trace
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseConnection.DisposeStreamParser">
            <summary>
            Disposes the stream parser.
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseConnection.SetConnection(WB.IIIParty.Commons.Net.Sockets.TcpServerConnection,WB.IIIParty.Commons.Protocol.IMessageParser,System.Action{System.String})">
            <summary>
            Imposta una nuova connessione tcp, non puo` essere nulll
            </summary>
            <param name="conn">La nuova connessione</param>
            <param name="parser">Il nuovo message parser, se null non viene riassegnato</param>
            <param name="strAct">Inizializza la <seealso cref="P:WB.Commons.Net.Bin.ABaseConnection.LogAction" /></param>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.NullReferenceException">Lanciata se la connessione passata per argomento e` null</exception>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseConnection.sp_OnMessageParseError(WB.IIIParty.Commons.Protocol.MessageParseException)">
            <summary>
            SP_s the on message parse error.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseConnection.sp_OnError(System.Exception)">
            <summary>
            SP_s the on error.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseConnection.sp_MessageReceived(WB.IIIParty.Commons.Protocol.IMessage,WB.IIIParty.Commons.Protocol.MessageValidationException)">
            <summary>
            SP_s the message received.
            </summary>
            <param name="imsg">The imsg.</param>
            <param name="error">The error.</param>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseConnection.onAnswerToMsgStatic">
            <summary>
            Occurs when [on answer to MSG static].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseConnection.OnAnswerToMsgStatic">
            <summary>
            Evento statico lanciato alla ricezione di un IMessage
            </summary>
            <remarks>E` statico in quanto deve essere condiviso da tutte le connessioni ed accessibile sia da
            <seealso cref="!:ABaseServer" />
            che da <seealso cref="!:ServerViewModel&lt;TServer,TConnection,TCliParser&gt;" /></remarks>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseConnection.onAnswerToMsg">
            <summary>
            Occurs when [on answer to MSG].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseConnection.OnAnswerToMsg">
            <summary>
            Evento lanciato alla ricezione di un IMessage
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseConnection.connection_OnTrace(WB.IIIParty.Commons.Protocol.IStream,WB.IIIParty.Commons.Protocol.TraceDirections,System.Byte[],System.String)">
            <summary>
            Connection_s the on trace.
            </summary>
            <param name="sender">The sender.</param>
            <param name="direction">The direction.</param>
            <param name="data">The data.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseConnection.connection_OnDisconnect(System.Object,WB.IIIParty.Commons.Net.Sockets.TCPEventArgs,System.Boolean)">
            <summary>
            Connection_s the on disconnect.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:WB.IIIParty.Commons.Net.Sockets.TCPEventArgs"/> instance containing the event data.</param>
            <param name="DisconnectByServer">if set to <c>true</c> [disconnect by server].</param>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseConnection.Dispose">
            <summary>
            Libera le risorse associate all'oggetto
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseConnection.Send(WB.IIIParty.Commons.Protocol.IMessage)">
            <summary>
            Invia un IMessage
            </summary>
            <param name="msg">The MSG.</param>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseConnection.SendSync(WB.IIIParty.Commons.Protocol.IMessage,System.Collections.Generic.List{WB.IIIParty.Commons.Protocol.IMessage}@,System.Collections.Generic.List{WB.IIIParty.Commons.Protocol.MessageValidationException}@)">
            <summary>
            Invia un <see cref="T:WB.IIIParty.Commons.Protocol.IMessage" /> sincrono
            </summary>
            <param name="msg">Messaggio da inviare al client</param>
            <param name="msgOut">Dopo la chiamata al metodo in caso di buon fine contiene il/i messaggi di risposta</param>
            <param name="vEx">Dopo la chiamata al metodo in caso di errore contiene la/le eccezioni lanciate dal client</param>
            <returns>Risultato della chiamata sincrona, <seealso cref="T:WB.IIIParty.Commons.Protocol.SyncResult" /></returns>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseConnection.SendAsync(WB.IIIParty.Commons.Protocol.IMessage,WB.IIIParty.Commons.Protocol.dAsyncCallback,System.Object)">
            <summary>
            Invia un <see cref="T:WB.IIIParty.Commons.Protocol.IMessage" /> asincrono
            </summary>
            <param name="msg">Messaggio da inviare al client</param>
            <param name="callback">delegate chiamato alla ricezione della risposta</param>
            <param name="extra">Parametro/i da passare a <paramref name="callback" /></param>
            <returns>Risultato della chiamata asincrona, <seealso cref="T:WB.IIIParty.Commons.Protocol.ASyncResult" /></returns>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseConnection.BeginReceive">
            <summary>
            Avvia la ricezione di nuovi messaggi
            </summary>
        </member>
        <member name="T:WB.Commons.Net.Bin.ABaseRedundantClient`1">
            <summary>
            Classe base per l'implementazione di un Client in un dato protocollo
            </summary>
            <typeparam name="TSrvParser">Rappresenta il message parser nel protocollo specifico per interpretare i messaggi del server</typeparam>
        </member>
        <member name="F:WB.Commons.Net.Bin.ABaseRedundantClient`1.cliParser">
            <summary>
            The cli parser
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Bin.ABaseRedundantClient`1.config">
            <summary>
            The config
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Bin.ABaseRedundantClient`1.tlog">
            <summary>
            The tlog
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Bin.ABaseRedundantClient`1.client">
            <summary>
            The client
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Bin.ABaseRedundantClient`1.logAction">
            <summary>
            The log action
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Bin.ABaseRedundantClient`1.onConnect">
            <summary>
            The on connect
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Bin.ABaseRedundantClient`1.onDisConnect">
            <summary>
            The on dis connect
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Bin.ABaseRedundantClient`1.onServerConnect">
            <summary>
            The on server connect
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Bin.ABaseRedundantClient`1.onServerDisconnect">
            <summary>
            The on server disconnect
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Bin.ABaseRedundantClient`1.messageReceived">
            <summary>
            The message received
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Bin.ABaseRedundantClient`1.messageParseError">
            <summary>
            The message parse error
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Bin.ABaseRedundantClient`1.srvParser">
            <summary>
            The SRV parser
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseRedundantClient`1.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WB.Commons.Net.Bin.ABaseRedundantClient`1"/> class.
            </summary>
            <param name="_ip1">The _ip1.</param>
            <param name="_port1">The _port1.</param>
            <param name="_ip2">The _ip2.</param>
            <param name="_port2">The _port2.</param>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseRedundantClient`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WB.Commons.Net.Bin.ABaseRedundantClient`1"/> class.
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseRedundantClient`1.#ctor(WB.Commons.Net.Bin.Interfaces.IRedundantCliConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:WB.Commons.Net.Bin.ABaseRedundantClient`1"/> class.
            </summary>
            <param name="_config">The _config.</param>
        </member>
        <member name="P:WB.Commons.Net.Bin.ABaseRedundantClient`1.IP1">
            <summary>
            Gets or sets the I p1.
            </summary>
            <value>The I p1.</value>
        </member>
        <member name="P:WB.Commons.Net.Bin.ABaseRedundantClient`1.Port1">
            <summary>
            Gets or sets the port1.
            </summary>
            <value>The port1.</value>
        </member>
        <member name="P:WB.Commons.Net.Bin.ABaseRedundantClient`1.IP2">
            <summary>
            Gets or sets the I p2.
            </summary>
            <value>The I p2.</value>
        </member>
        <member name="P:WB.Commons.Net.Bin.ABaseRedundantClient`1.Port2">
            <summary>
            Gets or sets the port2.
            </summary>
            <value>The port2.</value>
        </member>
        <member name="P:WB.Commons.Net.Bin.ABaseRedundantClient`1.Trace">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:WB.Commons.Net.Bin.ABaseRedundantClient`1"/> is trace.
            </summary>
            <value><c>true</c> if trace; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WB.Commons.Net.Bin.ABaseRedundantClient`1.Log">
            <summary>
            Gets or sets the log.
            </summary>
            <value>The log.</value>
        </member>
        <member name="F:WB.Commons.Net.Bin.ABaseRedundantClient`1.redundant">
            <summary>
            The redundant
            </summary>
        </member>
        <member name="P:WB.Commons.Net.Bin.ABaseRedundantClient`1.Redundant">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:WB.Commons.Net.Bin.ABaseRedundantClient`1"/> is redundant.
            </summary>
            <value><c>true</c> if redundant; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WB.Commons.Net.Bin.ABaseRedundantClient`1.InfoServerPrimary">
            <summary>
            Gets the info server primary.
            </summary>
            <value>The info server primary.</value>
        </member>
        <member name="P:WB.Commons.Net.Bin.ABaseRedundantClient`1.InfoServerSecondary">
            <summary>
            Gets the info server secondary.
            </summary>
            <value>The info server secondary.</value>
        </member>
        <member name="P:WB.Commons.Net.Bin.ABaseRedundantClient`1.IsConnected">
            <summary>
            Gets a value indicating whether this instance is connected.
            </summary>
            <value><c>true</c> if this instance is connected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WB.Commons.Net.Bin.ABaseRedundantClient`1.IsPrimaryConnected">
            <summary>
            Gets a value indicating whether this instance is primary connected.
            </summary>
            <value><c>true</c> if this instance is primary connected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WB.Commons.Net.Bin.ABaseRedundantClient`1.IsSecondaryConnected">
            <summary>
            Gets a value indicating whether this instance is secondary connected.
            </summary>
            <value><c>true</c> if this instance is secondary connected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WB.Commons.Net.Bin.ABaseRedundantClient`1.PrimaryStream">
            <summary>
            Gets the primary stream.
            </summary>
            <value>The primary stream.</value>
        </member>
        <member name="P:WB.Commons.Net.Bin.ABaseRedundantClient`1.SecondaryStream">
            <summary>
            Gets the secondary stream.
            </summary>
            <value>The secondary stream.</value>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseRedundantClient`1.Connect">
            <summary>
            Connects this instance.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseRedundantClient`1.Disconnect">
            <summary>
            Disconnects this instance.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseRedundantClient`1.ForceDisconnect">
            <summary>
            Forces the disconnect.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="P:WB.Commons.Net.Bin.ABaseRedundantClient`1.LogAction">
            <summary>
            Gets the log action.
            </summary>
            <value>The log action.</value>
        </member>
        <member name="P:WB.Commons.Net.Bin.ABaseRedundantClient`1.Client">
            <summary>
            Gets the client.
            </summary>
            <value>The client.</value>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseRedundantClient`1.MessageReceived">
            <summary>
            Occurs when [message received].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseRedundantClient`1.MessageParseError">
            <summary>
            Occurs when [message parse error].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseRedundantClient`1.OnServerConnect">
            <summary>
            Occurs when [on server connect].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseRedundantClient`1.OnServerDisconnect">
            <summary>
            Occurs when [on server disconnect].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseRedundantClient`1.answerToMessage">
            <summary>
            Occurs when [answer to message].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseRedundantClient`1.AnswerToMessage">
            <summary>
            Evento lanciato in risposta ad un messaggio lato server; il delegate associato prende in input
            l'<see cref="T:WB.IIIParty.Commons.Protocol.IMessage" /> dal server e deve ritornare l'<see cref="T:WB.IIIParty.Commons.Protocol.IMessage" /> di risposta
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseRedundantClient`1.onSendMessage">
            <summary>
            Occurs when [on send message].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseRedundantClient`1.OnSendMessage">
            <summary>
            Evento all'invio di un <see cref="T:WB.IIIParty.Commons.Protocol.IMessage" /> verso i lserver
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseRedundantClient`1.SendMessage(WB.IIIParty.Commons.Protocol.IMessage)">
            <summary>
            Invia un <see cref="T:WB.IIIParty.Commons.Protocol.IMessage" /> al server
            </summary>
            <param name="imsg"><see cref="T:WB.IIIParty.Commons.Protocol.IMessage" /> da inviare</param>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseRedundantClient`1.onSendMessageAsync">
            <summary>
            Occurs when [on send message async].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseRedundantClient`1.OnSendMessageAsync">
            <summary>
            Evento lanciato all'invio di un messaggio asincrono
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseRedundantClient`1.SendMessageAsync(WB.IIIParty.Commons.Protocol.IMessage,WB.IIIParty.Commons.Protocol.dAsyncCallback,System.Object)">
            <summary>
            Sends the message async.
            </summary>
            <param name="imsg">The imsg.</param>
            <param name="cback">The cback.</param>
            <param name="parm">The parm.</param>
            <returns>ASyncResult.</returns>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseRedundantClient`1.onSendMessageSync">
            <summary>
            Occurs when [on send message sync].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseRedundantClient`1.OnSendMessageSync">
            <summary>
            Evento lanciato all'invio di un messaggio sincrono
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseRedundantClient`1.SendMessageSync(WB.IIIParty.Commons.Protocol.IMessage,System.Collections.Generic.List{WB.IIIParty.Commons.Protocol.IMessage}@,System.Collections.Generic.List{WB.IIIParty.Commons.Protocol.MessageValidationException}@)">
            <summary>
            Sends the message sync.
            </summary>
            <param name="imsg">The imsg.</param>
            <param name="msgout">The msgout.</param>
            <param name="vEx">The v ex.</param>
            <returns>SyncResult.</returns>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseRedundantClient`1.OnConnect">
            <summary>
            Evento lanciato all'avvenuta connessione
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseRedundantClient`1.OnDisConnect">
            <summary>
            Evento lanciato all'avvenuta disconnessione
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseRedundantClient`1.onCreateClient">
            <summary>
            Occurs when [on create client].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseRedundantClient`1.OnCreateClient">
            <summary>
            Evento lanciato alla creazione del client TCP
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseRedundantClient`1.CreateClientTcp">
            <summary>
            Crea un nuovo TcpClient, cabla gli eventi ed abilita la connessione
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseRedundantClient`1.CreateClientTcp(System.Boolean)">
            <summary>
            Crea un nuovo TcpClient, cabla gli eventi ed abilita la connessione
            </summary>
            <param name="isRedundant">if set to <c>true</c> [is redundant].</param>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseRedundantClient`1.CreateClientTcp(System.String,System.String,System.String,System.String)">
            <summary>
            Crea un nuovo TcpClient, cabla gli eventi ed abilita la connessione
            </summary>
            <param name="_ip1">The _ip1.</param>
            <param name="_port1">The _port1.</param>
            <param name="_ip2">The _ip2.</param>
            <param name="_port2">The _port2.</param>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseRedundantClient`1.onDisposeClientTcp">
            <summary>
            Occurs when [on dispose client TCP].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseRedundantClient`1.OnDisposeClientTcp">
            <summary>
            Evento lanciato alla distruzione del client TCP
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseRedundantClient`1.DisposeClientTcp">
            <summary>
            Distrugge il TcpClient
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseRedundantClient`1.client_OnDisconnect">
            <summary>
            Client_s the on disconnect.
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseRedundantClient`1.client_OnConnect">
            <summary>
            Client_s the on connect.
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseRedundantClient`1.sp_OnError(System.Exception)">
            <summary>
            SP_s the on error.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseRedundantClient`1.sp_OnMessageParseError(WB.IIIParty.Commons.Protocol.MessageParseException)">
            <summary>
            SP_s the on message parse error.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseRedundantClient`1.onMessageReceived(WB.IIIParty.Commons.Protocol.IMessage,WB.IIIParty.Commons.Protocol.MessageValidationException)">
            <summary>
            Ons the message received.
            </summary>
            <param name="msg">The MSG.</param>
            <param name="error">The error.</param>
        </member>
        <member name="P:WB.Commons.Net.Bin.ABaseRedundantClient`1.IsEnabled">
            <summary>
            Gets a value indicating whether this instance is enabled.
            </summary>
            <value><c>true</c> if this instance is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:WB.Commons.Net.Bin.ABaseServer`2">
            <summary>
            Classe base per l'implementazione di un Server per un generico protocollo
            </summary>
            <typeparam name="TConnection">Rappresenta l'implementazione della server connection nel protocollo specifico</typeparam>
            <typeparam name="TMessageParser">Rappresenta il message parser nel protocollo specifico per interpretare i messaggi del server</typeparam>
        </member>
        <member name="F:WB.Commons.Net.Bin.ABaseServer`2.connections">
            <summary>
            The connections
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Bin.ABaseServer`2.serverTcp">
            <summary>
            The server TCP
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Bin.ABaseServer`2.toutConnectionMs">
            <summary>
            The tout connection ms
            </summary>
        </member>
        <member name="P:WB.Commons.Net.Bin.ABaseServer`2.ServerTcp">
            <summary>
            Gets the server TCP.
            </summary>
            <value>The server TCP.</value>
        </member>
        <member name="P:WB.Commons.Net.Bin.ABaseServer`2.Enabled">
            <summary>
            Indica lo stato del tcp server
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WB.Commons.Net.Bin.ABaseServer`2.IP">
            <summary>
            Gets or sets the IP.
            </summary>
            <value>The IP.</value>
        </member>
        <member name="P:WB.Commons.Net.Bin.ABaseServer`2.Port">
            <summary>
            Gets or sets the port.
            </summary>
            <value>The port.</value>
        </member>
        <member name="P:WB.Commons.Net.Bin.ABaseServer`2.Trace">
            <summary>
            Attiva o disattiva il trace su tutte le connessioni
            </summary>
            <value><c>true</c> if trace; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:WB.Commons.Net.Bin.ABaseServer`2.beginConnect">
            <summary>
            The begin connect
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Bin.ABaseServer`2.beginDisconnect">
            <summary>
            The begin disconnect
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Bin.ABaseServer`2.logAction">
            <summary>
            The log action
            </summary>
        </member>
        <member name="P:WB.Commons.Net.Bin.ABaseServer`2.LogAction">
            <summary>
            Permette di impostare un metodo custom che accetti come parametro una stringa (metodo di log)
            Viene invocato dagli eventi relativi agli IMessage per visualizzare il messaggio in formato testuale
            </summary>
            <value>The log action.</value>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseServer`2.BeginConnect">
            <summary>
            Evento lanciato quando il tcp server riceve una nuova connessione
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseServer`2.BeginDisconnect">
            <summary>
            Evento lanciato alla chiusura di una connessione
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseServer`2.onMessageReceivedGlobal">
            <summary>
            Occurs when [on message received global].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseServer`2.OnMessageReceivedGlobal">
            <summary>
            Evento lanciato alla ricezione di un IMessage
            </summary>
            <remarks>E` comune a tutte le connessioni</remarks>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseServer`2.onDataReceivedGlobal">
            <summary>
            Evento lanciato alla ricezione di un byte[]
            </summary>
            <remarks>E` comune a tutte le connessioni</remarks>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseServer`2.OnDataReceivedGlobal">
            <summary>
            Occurs when [on data received global].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseServer`2.onNotifyAnswerToMsg">
            <summary>
            Occurs when [on notify answer to MSG].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseServer`2.OnNotifyAnswerToMsg">
            <summary>
            Evento lanciato da tutte le connessioni alla ricezione di un IMessage
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseServer`2.onAnswerToMsg">
            <summary>
            Occurs when [on answer to MSG].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseServer`2.OnAnswerToMsg">
            <summary>
            Evento di risposta ad un IMessage verso una data connessione
            <para> Il metodo accetta come parametro l'IMessage a cui si deve rispondere e ritorna l'IMessage di risposta </para>
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseServer`2.onConnTrace">
            <summary>
            Occurs when [on conn trace].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseServer`2.OnConnTrace">
            <summary>
            Occurs when [on conn trace].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseServer`2.onConnDisconnect">
            <summary>
            Occurs when [on conn disconnect].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseServer`2.OnConnDisconnect">
            <summary>
            Occurs when [on conn disconnect].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseServer`2.onMessageReceived">
            <summary>
            Occurs when [on message received].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseServer`2.OnMessageReceived">
            <summary>
            Occurs when [on message received].
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseServer`2.#ctor(System.Net.IPAddress,System.Int32,System.Action{System.String})">
            <summary>
            Inizializza un nuovo Server.
            </summary>
            <param name="localip">Indirizzo IP locale</param>
            <param name="port">Porta di ascolto locale</param>
            <param name="strAct">Metodo di log da associare alle connection</param>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseServer`2.#ctor(WB.Commons.Net.Bin.Interfaces.ISrvConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:WB.Commons.Net.Bin.ABaseServer`2"/> class.
            </summary>
            <param name="config">The config.</param>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseServer`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WB.Commons.Net.Bin.ABaseServer`2"/> class.
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseServer`2.server_BeginConnect(System.Object,WB.IIIParty.Commons.Net.Sockets.TCPEventArgs)">
            <summary>
            Handles the BeginConnect event of the server control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:WB.IIIParty.Commons.Net.Sockets.TCPEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseServer`2.server_BeginDisconnect(System.Object,WB.IIIParty.Commons.Net.Sockets.TCPEventArgs)">
            <summary>
            Handles the BeginDisconnect event of the server control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:WB.IIIParty.Commons.Net.Sockets.TCPEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseServer`2.Add(WB.IIIParty.Commons.Net.Sockets.TcpServerConnection)">
            <summary>
            Aggiunge una connessione al server
            </summary>
            <param name="conn"><c>TcpServerConnection</c> da aggiungere al server</param>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseServer`2.Add(`0)">
            <summary>
            Aggiunge una connessione al server
            </summary>
            <param name="psc"><c>Connection</c> da aggiungere al server</param>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseServer`2.Remove(WB.IIIParty.Commons.Net.Sockets.TcpServerConnection)">
            <summary>
            Rimuove una connessione dal server
            </summary>
            <param name="conn"><c>TcpServerConnection</c> da rimuovere dal server</param>
            <remarks>Viene chiamato <c>Dispose</c> sulla <c>Connection</c> relativa alla connessione specificata</remarks>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseServer`2.Remove(`0)">
            <summary>
            Aggiunge una connessione al server
            </summary>
            <param name="psc"><c>Connection</c> da aggiungere al server</param>
        </member>
        <member name="T:WB.Commons.Net.Bin.ABaseServer`2.dOnSendMessageAsync">
            <summary>
            Delegate dOnSendMessageAsync
            </summary>
            <param name="c">The c.</param>
            <param name="res">The res.</param>
            <param name="msg">The MSG.</param>
            <param name="cb">The cb.</param>
            <param name="o">The o.</param>
        </member>
        <member name="T:WB.Commons.Net.Bin.ABaseServer`2.dOnSendMessageSync">
            <summary>
            Delegate dOnSendMessageSync
            </summary>
            <param name="c">The c.</param>
            <param name="res">The res.</param>
            <param name="msg">The MSG.</param>
            <param name="msgOut">The MSG out.</param>
            <param name="vEx">The v ex.</param>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseServer`2.Dispose">
            <summary>
            Libera le risorse associate al server
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseServer`2.NotifyMessage(WB.IIIParty.Commons.Protocol.IMessage)">
            <summary>
            Invia un IMessage a tutte le connessioni attive (notifica ai client)
            </summary>
            <param name="msg">Messaggio da inviare ai client</param>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseServer`2.onNotifyMessage">
            <summary>
            Occurs when [on notify message].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseServer`2.OnNotifyMessage">
            <summary>
            Evento lanciato all'invio di un IMessage verso tutte le connessioni
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseServer`2.SendMessage(`0,WB.IIIParty.Commons.Protocol.IMessage)">
            <summary>
            Invia un IMessage alla connessione specificata
            </summary>
            <param name="c"><c>Connection</c> relativa al client</param>
            <param name="msg">Messaggio da inviare al client</param>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseServer`2.SendMessageSync(`0,WB.IIIParty.Commons.Protocol.IMessage,System.Collections.Generic.List{WB.IIIParty.Commons.Protocol.IMessage}@,System.Collections.Generic.List{WB.IIIParty.Commons.Protocol.MessageValidationException}@)">
            <summary>
            Sends the message sync.
            </summary>
            <param name="c">The c.</param>
            <param name="msg">The MSG.</param>
            <param name="msgOut">The MSG out.</param>
            <param name="vEx">The v ex.</param>
            <returns>SyncResult.</returns>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseServer`2.SendMessageAsync(`0,WB.IIIParty.Commons.Protocol.IMessage,WB.IIIParty.Commons.Protocol.dAsyncCallback,System.Object)">
            <summary>
            Sends the message async.
            </summary>
            <param name="c">The c.</param>
            <param name="msg">The MSG.</param>
            <param name="callback">The callback.</param>
            <param name="extra">The extra.</param>
            <returns>ASyncResult.</returns>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseServer`2.onSendMessage">
            <summary>
            Occurs when [on send message].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseServer`2.OnSendMessage">
            <summary>
            Evento lanciato all'invio di un IMessage verso una data connessione
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseServer`2.onSendMessageSync">
            <summary>
            Occurs when [on send message sync].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseServer`2.OnSendMessageSync">
            <summary>
            Evento lanciato in caso di invio di un messaggio sincrono, <seealso cref="!:TConnection.SendMessageSync" />
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseServer`2.onSendMessageAsync">
            <summary>
            Occurs when [on send message async].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseServer`2.OnSendMessageAsync">
            <summary>
            Evento lanciato in caso di invio di un messaggio asincrono, <seealso cref="!:TConnection.SendMessageAsync" />
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseServer`2.Start">
            <summary>
            Abilita il server
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseServer`2.onStart">
            <summary>
            Occurs when [on start].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseServer`2.OnStart">
            <summary>
            Evento lanciato all'avvio del server
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseServer`2.Stop">
            <summary>
            Disabilita il server
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseServer`2.onStop">
            <summary>
            Occurs when [on stop].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Bin.ABaseServer`2.OnStop">
            <summary>
            Evento lanciato allo stop del server
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Bin.ABaseServer`2.Disconnect">
            <summary>
            Disconnette tutti i client
            </summary>
        </member>
        <member name="T:WB.Commons.Net.Bin.Factory`1">
            <summary>
            Class Factory
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:WB.Commons.Net.Bin.Factory`1.CreateInstance">
            <summary>
            Creates the instance.
            </summary>
            <returns>`0.</returns>
        </member>
        <member name="T:WB.Commons.Net.dLogAction">
            <summary>
            Delegate dLogAction
            </summary>
            <param name="msg">The MSG.</param>
            <param name="parms">The parms.</param>
        </member>
        <member name="T:WB.Commons.Net.IClient">
            <summary>
            Interface IClient
            </summary>
        </member>
        <member name="P:WB.Commons.Net.IClient.IsEnabled">
            <summary>
            Gets a value indicating whether this instance is enabled.
            </summary>
            <value><c>true</c> if this instance is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:WB.Commons.Net.IClient.SendMessage(WB.IIIParty.Commons.Protocol.IMessage)">
            <summary>
            Sends the message.
            </summary>
            <param name="imsg">The imsg.</param>
        </member>
        <member name="M:WB.Commons.Net.IClient.SendMessageAsync(WB.IIIParty.Commons.Protocol.IMessage,WB.IIIParty.Commons.Protocol.dAsyncCallback,System.Object)">
            <summary>
            Sends the message async.
            </summary>
            <param name="imsg">The imsg.</param>
            <param name="cback">The cback.</param>
            <param name="parm">The parm.</param>
            <returns>ASyncResult.</returns>
        </member>
        <member name="M:WB.Commons.Net.IClient.SendMessageSync(WB.IIIParty.Commons.Protocol.IMessage,System.Collections.Generic.List{WB.IIIParty.Commons.Protocol.IMessage}@,System.Collections.Generic.List{WB.IIIParty.Commons.Protocol.MessageValidationException}@)">
            <summary>
            Sends the message sync.
            </summary>
            <param name="imsg">The imsg.</param>
            <param name="msgout">The msgout.</param>
            <param name="vEx">The v ex.</param>
            <returns>SyncResult.</returns>
        </member>
        <member name="T:WB.Commons.Net.Xml.BaseClientFactory">
            <summary>
            Class BaseClientFactory
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Xml.BaseClientFactory.CreateInstance(System.Object[])">
            <summary>
            Creates the instance.
            </summary>
            <param name="parms">The parms.</param>
            <returns>TcpClient.</returns>
        </member>
        <member name="T:WB.Commons.Net.Xml.BaseClient">
            <summary>
            
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Xml.BaseClient.cli">
            <summary>
            The cli
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Xml.BaseClient.parser">
            <summary>
            The parser
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Xml.BaseClient.serializer">
            <summary>
            The serializer
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Xml.BaseClient.#ctor(WB.Commons.Net.Xml.BaseClientFactory,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:WB.Commons.Net.Xml.BaseClient"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="parms">The parms.</param>
            <exception cref="T:System.ArgumentNullException">factory</exception>
        </member>
        <member name="P:WB.Commons.Net.Xml.BaseClient.IsConnected">
            <summary>
            Ritorna lo stato di connessione del socket.
            </summary>
            <value><c>true</c> if this instance is connected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WB.Commons.Net.Xml.BaseClient.LocalEndPoint">
            <summary>
            Ritorna l'end point locale del socket (null se socket non connesso)
            </summary>
            <value>The local end point.</value>
        </member>
        <member name="P:WB.Commons.Net.Xml.BaseClient.RemoteEndPoint">
            <summary>
            Ritorna l'end point remoto del socket (null se socket non connesso)
            </summary>
            <value>The remote end point.</value>
        </member>
        <member name="P:WB.Commons.Net.Xml.BaseClient.Trace">
            <summary>
            Activates <see cref="E:WB.Commons.Net.Xml.BaseClient.TraceOutput" /> and <see cref="E:WB.Commons.Net.Xml.BaseClient.TraceInput" /> events
            </summary>
            <value><c>true</c> if trace; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:WB.Commons.Net.Xml.BaseClient.CloseConnection">
            <summary>
            Chiude la connessione ma non disabilita il Driver
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Xml.BaseClient.Connect(System.TimeSpan)">
            <summary>
            Abilita il Client TcpIp
            </summary>
            <param name="connectdelay">Imposta un ritardo sul primo tentativo di connessione</param>
        </member>
        <member name="M:WB.Commons.Net.Xml.BaseClient.Connect">
            <summary>
            Connects this instance.
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Xml.BaseClient.ConnectWait(System.TimeSpan)">
            <summary>
            Abilita il Client TcpIp e attende la prima connessione
            </summary>
            <param name="connectTimeout">Imposta il timeout di attesa alla prima connessione</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:WB.Commons.Net.Xml.BaseClient.Disconnect">
            <summary>
            Disabilita il Client TcpIp
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Xml.BaseClient.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Xml.BaseClient.Send(WB.IIIParty.Commons.Protocol.IMessage)">
            <summary>
            Sends the specified MSG.
            </summary>
            <param name="msg">The MSG.</param>
        </member>
        <member name="M:WB.Commons.Net.Xml.BaseClient.Send(System.Byte[])">
            <summary>
            Invia un array di bytes sul Socket
            </summary>
            <param name="byteToSend">Dati da inviare</param>
        </member>
        <member name="M:WB.Commons.Net.Xml.BaseClient.SendAsync(WB.IIIParty.Commons.Protocol.IMessage,WB.IIIParty.Commons.Protocol.dAsyncCallback,System.Object)">
            <summary>
            Sends the async.
            </summary>
            <param name="msg">The MSG.</param>
            <param name="callback">The callback.</param>
            <param name="extra">The extra.</param>
            <returns>ASyncResult.</returns>
        </member>
        <member name="M:WB.Commons.Net.Xml.BaseClient.SendSync(WB.IIIParty.Commons.Protocol.IMessage,System.Collections.Generic.List{WB.IIIParty.Commons.Protocol.IMessage}@,System.Collections.Generic.List{WB.IIIParty.Commons.Protocol.MessageValidationException}@)">
            <summary>
            Sends the sync.
            </summary>
            <param name="msgIn">The MSG in.</param>
            <param name="msgOut">The MSG out.</param>
            <param name="vEx">The v ex.</param>
            <returns>SyncResult.</returns>
        </member>
        <member name="M:WB.Commons.Net.Xml.BaseClient.WaitForConnected(System.TimeSpan)">
            <summary>
            Attende lo stato di connessione del socket
            </summary>
            <param name="connectTimeout">Imposta il timeout di attesa dello stato di connesso</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:WB.Commons.Net.Xml.BaseClient.RegisterType(System.Type)">
            <summary>
            Registers the type of <see cref="T:WB.IIIParty.Commons.Protocol.IMessage" /> passed as argument
            </summary>
            <param name="t">the <see cref="T:WB.IIIParty.Commons.Protocol.IMessage" /> to be registered</param>
            <remarks>Raises <see cref="T:System.ArgumentException" /> if the type passed is not an IMessage</remarks>
        </member>
        <member name="M:WB.Commons.Net.Xml.BaseClient.RegisterTypes">
            <summary>
            When implemented should just call <see cref="M:WB.Commons.Net.Xml.BaseClient.RegisterType(System.Type)" />
            for each message implemented in the specific protocol
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Xml.BaseClient.CliInstanceCreated">
            <summary>
            Occurs when [cli instance created].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Xml.BaseClient.TraceOutput">
            <summary>
            Event fired when receiving a message
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Xml.BaseClient.TraceInput">
            <summary>
            Event fired when sending a message
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Xml.BaseClient.OnConnect">
            <summary>
            Occurs when [on connect].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Xml.BaseClient.OnDisconnect">
            <summary>
            Occurs when [on disconnect].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Xml.BaseClient.OnTrace">
            <summary>
            Occurs when [on trace].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Xml.BaseClient.OnConnectFailure">
            <summary>
            Occurs when [on connect failure].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Xml.BaseClient.MessageReceived">
            <summary>
            Occurs when [message received].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Xml.BaseClient.OnError">
            <summary>
            Occurs when [on error].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Xml.BaseClient.OnMessageParseError">
            <summary>
            Occurs when [on message parse error].
            </summary>
        </member>
        <member name="T:WB.Commons.Net.Xml.BaseServer`1">
            <summary>
            Class BaseServer
            </summary>
            <typeparam name="TFactory">The type of the T factory.</typeparam>
        </member>
        <member name="F:WB.Commons.Net.Xml.BaseServer`1.Connections">
            <summary>
            The connections
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Xml.BaseServer`1.srv">
            <summary>
            The SRV
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Xml.BaseServer`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WB.Commons.Net.Xml.BaseServer`1"/> class.
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Xml.BaseServer`1.GetConnector(WB.IIIParty.Commons.Net.Sockets.TcpServerConnection)">
            <summary>
            Gets the connector.
            </summary>
            <param name="conn">The conn.</param>
            <returns>ServerConnector.</returns>
        </member>
        <member name="M:WB.Commons.Net.Xml.BaseServer`1.ProcessMessage(WB.IIIParty.Commons.Protocol.IMessage)">
            <summary>
            Processes the message.
            </summary>
            <param name="msg">The MSG.</param>
            <returns>IMessage.</returns>
        </member>
        <member name="M:WB.Commons.Net.Xml.BaseServer`1.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Xml.BaseServer`1.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Xml.BaseServer`1.RegisterType(System.Type)">
            <summary>
            Registers the type.
            </summary>
            <param name="t">The t.</param>
        </member>
        <member name="M:WB.Commons.Net.Xml.BaseServer`1.RegisterTypes">
            <summary>
            When implemented should just call <see cref="M:WB.Commons.Net.Xml.BaseServer`1.RegisterType(System.Type)" />
            passing the types of messages in the specific protocol
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Xml.BaseServer`1.srv_BeginConnect(System.Object,WB.IIIParty.Commons.Net.Sockets.TCPEventArgs)">
            <summary>
            Handles the BeginConnect event of the srv control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:WB.IIIParty.Commons.Net.Sockets.TCPEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WB.Commons.Net.Xml.BaseServer`1.srv_BeginDisconnect(System.Object,WB.IIIParty.Commons.Net.Sockets.TCPEventArgs)">
            <summary>
            Handles the BeginDisconnect event of the srv control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:WB.IIIParty.Commons.Net.Sockets.TCPEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:WB.Commons.Net.Xml.BaseServer`1.BeginConnect">
            <summary>
            Occurs when [begin connect].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Xml.BaseServer`1.BeginDisconnect">
            <summary>
            Occurs when [begin disconnect].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Xml.BaseServer`1.MessageReceived">
            <summary>
            Occurs when [message received].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Xml.BaseServer`1.OnError">
            <summary>
            Occurs when [on error].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Xml.BaseServer`1.OnMessageParseError">
            <summary>
            Occurs when [on message parse error].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Xml.BaseServer`1.OnTrace">
            <summary>
            Occurs when [on trace].
            </summary>
        </member>
        <member name="T:WB.Commons.Net.Xml.BaseServerFactory">
            <summary>
            Class BaseServerFactory
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Xml.BaseServerFactory.CreateInstance">
            <summary>
            Creates the instance.
            </summary>
            <returns>TcpServer.</returns>
        </member>
        <member name="T:WB.Commons.Net.Xml.BaseRedundantClientFactory">
            <summary>
            Class BaseRedundantClientFactory
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Xml.BaseRedundantClientFactory.CreateInstance(System.Object[])">
            <summary>
            Creates the instance.
            </summary>
            <param name="parms">The parms.</param>
            <returns>RedundantClientTcp.</returns>
        </member>
        <member name="T:WB.Commons.Net.Xml.BaseRedundantClient">
            <summary>
            Class BaseRedundantClient
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Xml.BaseRedundantClient.CliInstanceCreated">
            <summary>
            Occurs when [cli instance created].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Xml.BaseRedundantClient.TraceOutput">
            <summary>
            Event fired when receiving a message
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Xml.BaseRedundantClient.TraceInput">
            <summary>
            Event fired when sending a message
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Xml.BaseRedundantClient.OnConnect">
            <summary>
            Occurs when [on connect].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Xml.BaseRedundantClient.OnDisconnect">
            <summary>
            Occurs when [on disconnect].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Xml.BaseRedundantClient.MessageReceived">
            <summary>
            Occurs when [message received].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Xml.BaseRedundantClient.OnMessageParseError">
            <summary>
            Occurs when [on message parse error].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Xml.BaseRedundantClient.OnServerConnect">
            <summary>
            Occurs when [on server connect].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Xml.BaseRedundantClient.OnServerDisconnect">
            <summary>
            Occurs when [on server disconnect].
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Xml.BaseRedundantClient.cli">
            <summary>
            The cli
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Xml.BaseRedundantClient.serializer">
            <summary>
            The serializer
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Xml.BaseRedundantClient.#ctor(WB.Commons.Net.Xml.BaseRedundantClientFactory,System.Object[])">
            <summary>
            Costruttore base per un client ridondato basato su un protocollo xml
            </summary>
            <param name="factory">factory</param>
            <param name="parms">parametri da passare al factory</param>
            <exception cref="T:System.ArgumentNullException">factory</exception>
            <remarks>prima del client viene creato il serializer del protocollo ed aggiunto in testa ai parametri passati al client factory
            ricordarsi nell'implementazione del factory che il primo e` l'IMessageParser da passare al costruttore del
            TcpRedundantClient</remarks>
        </member>
        <member name="P:WB.Commons.Net.Xml.BaseRedundantClient.InfoServerPrimary">
            <summary>
            Ritorna le informazioni del server primary
            </summary>
            <value>The info server primary.</value>
        </member>
        <member name="P:WB.Commons.Net.Xml.BaseRedundantClient.InfoServerSecondary">
            <summary>
            Ritorna le informazioni del server secondary
            </summary>
            <value>The info server secondary.</value>
        </member>
        <member name="P:WB.Commons.Net.Xml.BaseRedundantClient.IsConnected">
            <summary>
            Gets a value indicating whether this instance is connected.
            </summary>
            <value><c>true</c> if this instance is connected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WB.Commons.Net.Xml.BaseRedundantClient.IsPrimaryConnected">
            <summary>
            Ritorna lo stato di connessione al server primario
            </summary>
            <value><c>true</c> if this instance is primary connected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WB.Commons.Net.Xml.BaseRedundantClient.IsRedundant">
            <summary>
            Ritorna se abilitata la ridondanza di client
            </summary>
            <value><c>true</c> if this instance is redundant; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WB.Commons.Net.Xml.BaseRedundantClient.IsSecondaryConnected">
            <summary>
            Ritorna lo stato di connessione al server secondarion
            </summary>
            <value><c>true</c> if this instance is secondary connected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WB.Commons.Net.Xml.BaseRedundantClient.PrimaryStream">
            <summary>
            Ritorna l'interfaccia stream del primo client tcp
            </summary>
            <value>The primary stream.</value>
        </member>
        <member name="P:WB.Commons.Net.Xml.BaseRedundantClient.SecondaryStream">
            <summary>
            Ritorna l'interfaccia stream del secondo client tcp
            </summary>
            <value>The secondary stream.</value>
        </member>
        <member name="P:WB.Commons.Net.Xml.BaseRedundantClient.Trace">
            <summary>
            Activates <see cref="E:WB.Commons.Net.Xml.BaseRedundantClient.TraceOutput" /> and <see cref="E:WB.Commons.Net.Xml.BaseRedundantClient.TraceInput" /> events
            </summary>
            <value><c>true</c> if trace; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:WB.Commons.Net.Xml.BaseRedundantClient.Connect">
            <summary>
            Connects this instance.
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Xml.BaseRedundantClient.Disconnect">
            <summary>
            Disconnects this instance.
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Xml.BaseRedundantClient.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Xml.BaseRedundantClient.ForceDisconnect">
            <summary>
            Forces the disconnect.
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Xml.BaseRedundantClient.Send(WB.IIIParty.Commons.Protocol.IMessage)">
            <summary>
            Sends the specified MSG.
            </summary>
            <param name="msg">The MSG.</param>
        </member>
        <member name="M:WB.Commons.Net.Xml.BaseRedundantClient.SendAsync(WB.IIIParty.Commons.Protocol.IMessage,WB.IIIParty.Commons.Protocol.dAsyncCallback,System.Object)">
            <summary>
            Sends the async.
            </summary>
            <param name="msg">The MSG.</param>
            <param name="callback">The callback.</param>
            <param name="extra">The extra.</param>
            <returns>System.Nullable{ASyncResult}.</returns>
        </member>
        <member name="M:WB.Commons.Net.Xml.BaseRedundantClient.SendSync(WB.IIIParty.Commons.Protocol.IMessage,System.Collections.Generic.List{WB.IIIParty.Commons.Protocol.IMessage}@,System.Collections.Generic.List{WB.IIIParty.Commons.Protocol.MessageValidationException}@)">
            <summary>
            Sends the sync.
            </summary>
            <param name="msgIn">The MSG in.</param>
            <param name="msgOut">The MSG out.</param>
            <param name="vEx">The v ex.</param>
            <returns>System.Nullable{SyncResult}.</returns>
        </member>
        <member name="M:WB.Commons.Net.Xml.BaseRedundantClient.RegisterType(System.Type)">
            <summary>
            Registers the type of <see cref="T:WB.IIIParty.Commons.Protocol.IMessage" /> passed as argument
            </summary>
            <param name="t">the <see cref="T:WB.IIIParty.Commons.Protocol.IMessage" /> to be registered</param>
            <remarks>Raises <see cref="T:System.ArgumentException" /> if the type passed is not an IMessage</remarks>
        </member>
        <member name="M:WB.Commons.Net.Xml.BaseRedundantClient.RegisterTypes">
            <summary>
            When implemented should just call <see cref="M:WB.Commons.Net.Xml.BaseRedundantClient.RegisterType(System.Type)" />
            for each message implemented in the specific protocol
            </summary>
        </member>
        <member name="T:WB.Commons.Net.Xml.IClientConfig">
            <summary>
            Interface IClientConfig
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Xml.IClientConfig.CreateTcpClient">
            <summary>
            Creates the TCP client.
            </summary>
            <returns>TcpClient.</returns>
        </member>
        <member name="T:WB.Commons.Net.Xml.IMessageProcessor">
            <summary>
            Interface IMessageProcessor
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Xml.IMessageProcessor.ProcessMessage(WB.IIIParty.Commons.Protocol.IMessage)">
            <summary>
            Processes the message.
            </summary>
            <param name="msg">The MSG.</param>
            <returns>IMessage.</returns>
        </member>
        <member name="T:WB.Commons.Net.Xml.ServerConnector">
            <summary>
            Class ServerConnector
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Xml.ServerConnector._msgProc">
            <summary>
            The _MSG proc
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Xml.ServerConnector._parser">
            <summary>
            The _parser
            </summary>
        </member>
        <member name="F:WB.Commons.Net.Xml.ServerConnector._serializer">
            <summary>
            The _serializer
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Xml.ServerConnector.#ctor(WB.IIIParty.Commons.Protocol.StreamParser,WB.Commons.Serialization.XmlMessageSerializerEx,WB.Commons.Net.Xml.IMessageProcessor)">
            <summary>
            Initializes a new instance of the <see cref="T:WB.Commons.Net.Xml.ServerConnector"/> class.
            </summary>
            <param name="sp">The sp.</param>
            <param name="ser">The ser.</param>
            <param name="msgProc">The MSG proc.</param>
        </member>
        <member name="P:WB.Commons.Net.Xml.ServerConnector.MessageProcessor">
            <summary>
            Gets the message processor.
            </summary>
            <value>The message processor.</value>
        </member>
        <member name="E:WB.Commons.Net.Xml.ServerConnector.MessageReceived">
            <summary>
            Occurs when [message received].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Xml.ServerConnector.OnError">
            <summary>
            Occurs when [on error].
            </summary>
        </member>
        <member name="E:WB.Commons.Net.Xml.ServerConnector.OnMessageParseError">
            <summary>
            Occurs when [on message parse error].
            </summary>
        </member>
        <member name="M:WB.Commons.Net.Xml.ServerConnector.Send(WB.IIIParty.Commons.Protocol.IMessage)">
            <summary>
            Sends the specified MSG.
            </summary>
            <param name="msg">The MSG.</param>
        </member>
        <member name="M:WB.Commons.Net.Xml.ServerConnector.SendAsync(WB.IIIParty.Commons.Protocol.IMessage,WB.IIIParty.Commons.Protocol.dAsyncCallback,System.Object)">
            <summary>
            Sends the async.
            </summary>
            <param name="msg">The MSG.</param>
            <param name="callback">The callback.</param>
            <param name="extra">The extra.</param>
            <returns>ASyncResult.</returns>
        </member>
        <member name="M:WB.Commons.Net.Xml.ServerConnector.SendSync(WB.IIIParty.Commons.Protocol.IMessage,System.Collections.Generic.List{WB.IIIParty.Commons.Protocol.IMessage}@,System.Collections.Generic.List{WB.IIIParty.Commons.Protocol.MessageValidationException}@)">
            <summary>
            Sends the sync.
            </summary>
            <param name="msg">The MSG.</param>
            <param name="msgOut">The MSG out.</param>
            <param name="vEx">The v ex.</param>
            <returns>SyncResult.</returns>
        </member>
        <member name="T:WB.Commons.Serialization.IXmlMessageSerializerInfoEx">
            <summary>
            Definisce l'interfaccia che restituisce un serializer xml a partire dal tipo di messaggio
            </summary>
        </member>
        <member name="M:WB.Commons.Serialization.IXmlMessageSerializerInfoEx.GetSerializeTypeByXmlTag(System.Xml.XmlReader,System.String)">
            <summary>
            Ritorna il valore del tag xml specificato
            </summary>
            <param name="xmlReader">The XML reader.</param>
            <param name="xmlTag">The XML tag.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:WB.Commons.Serialization.IXmlMessageSerializerInfoEx.GetXmlSerializer(System.String)">
            <summary>
            Ritorna il serializer del messaggio corrispondente
            </summary>
            <param name="type">The type.</param>
            <returns>XmlSerializer.</returns>
        </member>
        <member name="T:WB.Commons.Serialization.SerializableDictionary`2">
            <summary>
            Class SerializableDictionary
            </summary>
            <typeparam name="TKey">The type of the T key.</typeparam>
            <typeparam name="TValue">The type of the T value.</typeparam>
        </member>
        <member name="M:WB.Commons.Serialization.SerializableDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WB.Commons.Serialization.SerializableDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:WB.Commons.Serialization.SerializableDictionary`2.#ctor(WB.Commons.Serialization.SerializableDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:WB.Commons.Serialization.SerializableDictionary`2"/> class.
            </summary>
            <param name="dict">The dict.</param>
        </member>
        <member name="M:WB.Commons.Serialization.SerializableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:WB.Commons.Serialization.SerializableDictionary`2"/> class.
            </summary>
            <param name="dict">The dict.</param>
        </member>
        <member name="M:WB.Commons.Serialization.SerializableDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WB.Commons.Serialization.SerializableDictionary`2"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:WB.Commons.Serialization.SerializableDictionary`2.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> to the class.
            </summary>
            <returns>An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.</returns>
        </member>
        <member name="M:WB.Commons.Serialization.SerializableDictionary`2.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the object is deserialized.</param>
        </member>
        <member name="M:WB.Commons.Serialization.SerializableDictionary`2.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is serialized.</param>
        </member>
        <member name="T:WB.Commons.Serialization.SerializablePair`2">
            <summary>
            Struct SerializablePair
            </summary>
            <typeparam name="TKey">The type of the T key.</typeparam>
            <typeparam name="TValue">The type of the T value.</typeparam>
        </member>
        <member name="M:WB.Commons.Serialization.SerializablePair`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:WB.Commons.Serialization.SerializablePair`2"/> struct.
            </summary>
            <param name="k">The k.</param>
            <param name="v">The v.</param>
        </member>
        <member name="P:WB.Commons.Serialization.SerializablePair`2.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:WB.Commons.Serialization.SerializablePair`2.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:WB.Commons.Serialization.SerializablePair`2.op_Implicit(WB.Commons.Serialization.SerializablePair{`0,`1})~System.Collections.Generic.KeyValuePair{`0,`1}">
            <summary>
            Performs an implicit conversion from <see cref="!:SerializablePair&lt;"/> to <see cref="!:KeyValuePair&lt;`0`1&gt;"/>.
            </summary>
            <param name="sp">The sp.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:WB.Commons.Serialization.SerializablePair`2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:WB.Commons.Serialization.SerializablePair`2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:WB.Commons.Serialization.SerializablePair`2.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:WB.Commons.Serialization.SerializableTimeSpan">
            <summary>
            Class SerializableTimeSpan
            </summary>
        </member>
        <member name="M:WB.Commons.Serialization.SerializableTimeSpan.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WB.Commons.Serialization.SerializableTimeSpan"/> class.
            </summary>
        </member>
        <member name="M:WB.Commons.Serialization.SerializableTimeSpan.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:WB.Commons.Serialization.SerializableTimeSpan"/> class.
            </summary>
            <param name="ts">The ts.</param>
        </member>
        <member name="P:WB.Commons.Serialization.SerializableTimeSpan.duration">
            <summary>
            Gets or sets the duration.
            </summary>
            <value>The duration.</value>
        </member>
        <member name="M:WB.Commons.Serialization.SerializableTimeSpan.op_Implicit(System.TimeSpan)~WB.Commons.Serialization.SerializableTimeSpan">
            <summary>
            Performs an implicit conversion from <see cref="T:System.TimeSpan"/> to <see cref="T:WB.Commons.Serialization.SerializableTimeSpan"/>.
            </summary>
            <param name="ts">The ts.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:WB.Commons.Serialization.SerializableTimeSpan.op_Explicit(WB.Commons.Serialization.SerializableTimeSpan)~System.TimeSpan">
            <summary>
            Performs an explicit conversion from <see cref="T:WB.Commons.Serialization.SerializableTimeSpan"/> to <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="sts">The STS.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:WB.Commons.Serialization.XmlMessageSerializerEx">
            <summary>
            Implemena l'interfaccia IMessageParser per la serializzazione xml di messaggi su uno stream
            </summary>
        </member>
        <member name="F:WB.Commons.Serialization.XmlMessageSerializerEx.HeaderLength">
            <summary>
            The header length
            </summary>
        </member>
        <member name="F:WB.Commons.Serialization.XmlMessageSerializerEx.xmlMessageSerializerInfoEx">
            <summary>
            The XML message serializer info ex
            </summary>
        </member>
        <member name="F:WB.Commons.Serialization.XmlMessageSerializerEx.xmlTag">
            <summary>
            The XML tag
            </summary>
        </member>
        <member name="M:WB.Commons.Serialization.XmlMessageSerializerEx.#ctor(WB.Commons.Serialization.IXmlMessageSerializerInfoEx)">
            <summary>
            Initializes a new instance of the <see cref="T:WB.Commons.Serialization.XmlMessageSerializerEx"/> class.
            </summary>
            <param name="_xmlMessageSerializerInfoEx">The _XML message serializer info ex.</param>
        </member>
        <member name="M:WB.Commons.Serialization.XmlMessageSerializerEx.#ctor(WB.Commons.Serialization.IXmlMessageSerializerInfoEx,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WB.Commons.Serialization.XmlMessageSerializerEx"/> class.
            </summary>
            <param name="_xmlMessageSerializerInfoEx">The _XML message serializer info ex.</param>
            <param name="_xmlTag">The _XML tag.</param>
        </member>
        <member name="M:WB.Commons.Serialization.XmlMessageSerializerEx.CanReadLength(System.Byte[])">
            <summary>
            Ritorna se dai dati a disposizione è possibile calcolare la lunghezza COMPLESSIVA del messaggio
            </summary>
            <param name="data">The data.</param>
            <returns><c>true</c> if this instance [can read length] the specified data; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:WB.Commons.Serialization.XmlMessageSerializerEx.GetLength(System.Byte[])">
            <summary>
            Ritorna la lunghezza COMPLESSIVA del messaggio
            </summary>
            <param name="data">The data.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:WB.Commons.Serialization.XmlMessageSerializerEx.ParseMessage(System.Byte[])">
            <summary>
            Effettua la deserializzazione di un messaggio da un array di byte
            Errori di parsing devono essere generati ereditando da MessageParseException
            </summary>
            <param name="data">The data.</param>
            <returns>IMessage.</returns>
            <exception cref="T:WB.IIIParty.Commons.Protocol.Serialization.Exceptions.SerializerNotFoundException">Serializer not found:  + serializeType</exception>
            <exception cref="T:WB.IIIParty.Commons.Protocol.Serialization.Exceptions.XmlDeserializeException">Xml Deserialize Exception:  + ex.Message</exception>
        </member>
        <member name="M:WB.Commons.Serialization.XmlMessageSerializerEx.SerializeIsSupported">
            <summary>
            Ritorna se la classe può serializzare un oggetto
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:WB.Commons.Serialization.XmlMessageSerializerEx.SerializeMessage(WB.IIIParty.Commons.Protocol.IMessage,System.String)">
            <summary>
            Serializes the message.
            </summary>
            <param name="data">The data.</param>
            <param name="filename">The filename.</param>
            <exception cref="T:WB.IIIParty.Commons.Protocol.Serialization.Exceptions.SerializerNotFoundException">Serializer not found:  + serializerName</exception>
            <exception cref="T:WB.IIIParty.Commons.Protocol.Serialization.Exceptions.XmlSerializeException">Xml Serialize Exception:  + ex.Message</exception>
        </member>
        <member name="M:WB.Commons.Serialization.XmlMessageSerializerEx.SerializeMessage(WB.IIIParty.Commons.Protocol.IMessage)">
            <summary>
            Effettua la serializzazione di un messaggio in un array di byte
            </summary>
            <param name="data">The data.</param>
            <returns>System.Byte[][].</returns>
            <exception cref="T:WB.IIIParty.Commons.Protocol.Serialization.Exceptions.SerializerNotFoundException">Serializer not found:  + serializerName</exception>
            <exception cref="T:WB.IIIParty.Commons.Protocol.Serialization.Exceptions.XmlSerializeException">Xml Serialize Exception:  + ex.Message</exception>
        </member>
    </members>
</doc>
