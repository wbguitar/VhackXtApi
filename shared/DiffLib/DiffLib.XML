<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DiffLib</name>
    </assembly>
    <members>
        <member name="T:DiffLib.AlignedDiffChange`1">
            <summary>
            This class holds a single collection from either the first or the second, or both,
            collections given to the <see cref="T:DiffLib.AlignedDiff`1"/> class, along
            with the type of change that the elements produce.
            </summary>
        </member>
        <member name="M:DiffLib.AlignedDiffChange`1.#ctor(DiffLib.ChangeType,`0,`0)">
            <summary>
            Initializes a new instance of <see cref="T:DiffLib.AlignedDiffChange`1"/>.
            </summary>
            <param name="change">
            The <see cref="P:DiffLib.AlignedDiffChange`1.Change">type</see> of change this <see cref="T:DiffLib.AlignedDiffChange`1"/> details.
            </param>
            <param name="element1">
            The element from the first collection. If <paramref name="change"/> is <see cref="F:DiffLib.ChangeType.Added"/>, then
            this parameter has no meaning.
            </param>
            <param name="element2">
            The element from the second collection. If <paramref name="change"/> is <see cref="F:DiffLib.ChangeType.Deleted"/>, then
            this parameter has no meaning.
            </param>
        </member>
        <member name="M:DiffLib.AlignedDiffChange`1.Equals(DiffLib.AlignedDiffChange{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:DiffLib.AlignedDiffChange`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:DiffLib.AlignedDiffChange`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:DiffLib.AlignedDiffChange`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:DiffLib.AlignedDiffChange`1.Change">
            <summary>
            The <see cref="P:DiffLib.AlignedDiffChange`1.Change">type</see> of change this <see cref="T:DiffLib.AlignedDiffChange`1"/> details.
            </summary>
        </member>
        <member name="P:DiffLib.AlignedDiffChange`1.Element1">
            <summary>
            The element from the first collection. If <see cref="T:System.Type"/> is <see cref="F:DiffLib.ChangeType.Added"/>, then
            the value of this property has no meaning.
            </summary>
        </member>
        <member name="P:DiffLib.AlignedDiffChange`1.Element2">
            <summary>
            The element from the second collection. If <see cref="T:System.Type"/> is <see cref="F:DiffLib.ChangeType.Deleted"/>, then
            the value of this property has no meaning.
            </summary>
        </member>
        <member name="T:DiffLib.ChangeType">
            <summary>
            This enum is used by <see cref="T:DiffLib.AlignedDiffChange`1"/> to specify how
            the two elements from the two collections relate.
            </summary>
        </member>
        <member name="F:DiffLib.ChangeType.Same">
            <summary>
            The two elements are the same.
            </summary>
        </member>
        <member name="F:DiffLib.ChangeType.Added">
            <summary>
            The second element was added in the second collection.
            </summary>
        </member>
        <member name="F:DiffLib.ChangeType.Deleted">
            <summary>
            The first element was removed from the second collection.
            </summary>
        </member>
        <member name="F:DiffLib.ChangeType.Changed">
            <summary>
            The first element was changed/replaced with the second element in the second collection.
            </summary>
        </member>
        <member name="T:DiffLib.Diff`1">
            <summary>
            This class implements the basic diff algorithm by recursively applying the Longest Common Substring
            on pieces of the collections, and reporting sections that are similar, and those that are not,
            in the appropriate sequence.
            </summary>
            <typeparam name="T">
            The types of elements in the collections being compared.
            </typeparam>
        </member>
        <member name="M:DiffLib.Diff`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of <see cref="T:DiffLib.Diff`1"/>
            using the default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> instance for the
            <typeparamref name="T"/> type.
            </summary>
            <param name="collection1">
            The first collection of items.
            </param>
            <param name="collection2">
            The second collection of items.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="collection1"/> is <c>null</c>.</para>
            <para>- or -</para>
            <para><paramref name="collection2"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:DiffLib.Diff`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of <see cref="T:DiffLib.Diff`1"/>.
            </summary>
            <param name="collection1">
            The first collection of items.
            </param>
            <param name="collection2">
            The second collection of items.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that will be used to compare elements from
            <paramref name="collection1"/> with elements from <paramref name="collection2"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="collection1"/> is <c>null</c>.</para>
            <para>- or -</para>
            <para><paramref name="collection2"/> is <c>null</c>.</para>
            <para>- or -</para>
            <para><paramref name="comparer"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:DiffLib.Diff`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:DiffLib.Diff`1.Generate">
            <summary>
            Generates the diff between the two collections.
            </summary>
        </member>
        <member name="T:DiffLib.Diff">
            <summary>
            This static class contains helper methods to easily access <see cref="T:DiffLib.Diff`1"/> and <see cref="T:DiffLib.AlignedDiff`1"/>.
            </summary>
        </member>
        <member name="M:DiffLib.Diff.Calculate``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Calculates the diff between the two collections and returns it as a collection of <see cref="T:DiffLib.DiffChange"/> objects.
            </summary>
            <typeparam name="T">
            The type of elements in the two collections.
            </typeparam>
            <param name="collection1">
            The first collection, to compare with <paramref name="collection2"/>.
            </param>
            <param name="collection2">
            The second collection, to compare with <paramref name="collection1"/>.
            </param>
            <returns>
            A collection of <see cref="T:DiffLib.DiffChange"/> objects.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="collection1"/> is <c>null</c>.</para>
            <para>- or -</para>
            <para><paramref name="collection2"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:DiffLib.Diff.Calculate``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Calculates the diff between the two collections using the specified equality comparer and returns it as a collection of <see cref="T:DiffLib.DiffChange"/> objects.
            </summary>
            <typeparam name="T">
            The type of elements in the two collections.
            </typeparam>
            <param name="collection1">
            The first collection, to compare with <paramref name="collection2"/>.
            </param>
            <param name="collection2">
            The second collection, to compare with <paramref name="collection1"/>.
            </param>
            <param name="equalityComparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> object to use when determining which elements in the two collections are equal.
            </param>
            <returns>
            A collection of <see cref="T:DiffLib.DiffChange"/> objects.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="collection1"/> is <c>null</c>.</para>
            <para>- or -</para>
            <para><paramref name="collection2"/> is <c>null</c>.</para>
            <para>- or -</para>
            <para><paramref name="equalityComparer"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:DiffLib.Diff.Calculate``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},DiffLib.ISimilarityComparer{``0},DiffLib.IAlignmentFilter{``0})">
            <summary>
            Calculates the diff between the two collections using the specified equality comparer and returns it as a collection of <see cref="T:DiffLib.DiffChange"/> objects.
            </summary>
            <typeparam name="T">
            The type of elements in the two collections.
            </typeparam>
            <param name="collection1">
            The first collection, to compare with <paramref name="collection2"/>.
            </param>
            <param name="collection2">
            The second collection, to compare with <paramref name="collection1"/>.
            </param>
            <param name="equalityComparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> object to use when determining which elements in the two collections are equal.
            </param>
            <param name="similarityComparer">
            The <see cref="T:DiffLib.ISimilarityComparer`1"/> object to use when determining which elements are most similar when doing alignments.
            </param>
            <param name="alignmentFilter">
            The <see cref="T:DiffLib.IAlignmentFilter`1"/> object to use when determining which elements can be aligned to gether.
            </param>
            <returns>
            A collection of <see cref="T:DiffLib.DiffChange"/> objects.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="collection1"/> is <c>null</c>.</para>
            <para>- or -</para>
            <para><paramref name="collection2"/> is <c>null</c>.</para>
            <para>- or -</para>
            <para><paramref name="equalityComparer"/> is <c>null</c>.</para>
            <para>- or -</para>
            <para><paramref name="similarityComparer"/> is <c>null</c>.</para>
            <para>- or -</para>
            <para><paramref name="alignmentFilter"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="T:DiffLib.DiffChange">
            <summary>
            This class contains a single section of diff output from the <see cref="M:DiffLib.Diff`1.Generate"/>
            method.
            </summary>
        </member>
        <member name="M:DiffLib.DiffChange.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:DiffLib.DiffChange"/>.
            </summary>
            <param name="equal">
            If <c>true</c>, then the section specifies a section from the first
            collection that is equal to a section from the second collection;
            otherwise, if <c>false</c>, then the section from the first
            collection was replaced with the section from the second collection.
            </param>
            <param name="length1">
            The length of the section in the first collection. Can be 0 if
            the section specifies that new content was added in the second
            collection.
            </param>
            <param name="length2">
            The length of the section in the second collection. Can be 0 if
            the section specifies that old content was deleted in the second
            collection.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="length1"/> is negative.</para>
            <para>- or -</para>
            <para><paramref name="length2"/> is negative.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="equal"/> is <c>true</c> but <paramref name="length1"/> is not equal to <paramref name="length2"/>.</para>
            </exception>
        </member>
        <member name="M:DiffLib.DiffChange.Equals(DiffLib.DiffChange)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:DiffLib.DiffChange.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:DiffLib.DiffChange.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:DiffLib.DiffChange.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:DiffLib.DiffChange.Equal">
            <summary>
            Gets whether the <see cref="T:DiffLib.DiffChange"/> specifies equal sections in the two
            collections, or differing sections.
            </summary>
            <value>
            If <c>true</c>, then the section specifies a section from the first
            collection that is equal to a section from the second collection;
            otherwise, if <c>false</c>, then the section from the first
            collection was replaced with the section from the second collection.
            </value>
        </member>
        <member name="P:DiffLib.DiffChange.Length1">
            <summary>
            The length of the section in the first collection.
            </summary>
        </member>
        <member name="P:DiffLib.DiffChange.Length2">
            <summary>
            The length of the section in the second collection.
            </summary>
        </member>
        <member name="T:DiffLib.IAlignmentFilter`1">
            <summary>
            This interface must be implemented by classes that will do similarity-filtering
            during alignment (<see cref="T:DiffLib.AlignedDiff`1"/>) to determine
            if two aligned elements are similar enough to report
            them as a change, instead of as a delete plus an add.
            </summary>
            <typeparam name="T">
            The type of elements being compared.
            </typeparam>
        </member>
        <member name="M:DiffLib.IAlignmentFilter`1.CanAlign(`0,`0)">
            <summary>
            Determines if the two values are similar enough to align them
            as a change, instead of not aligning them but reporting them
            as a delete plus an add instead.
            </summary>
            <param name="value1">
            The first value to compare against <paramref name="value2"/>.
            </param>
            <param name="value2">
            The second value to compare against <paramref name="value1"/>.
            </param>
            <returns>
            <c>true</c> if the two values are similar enough to report
            them as a change; false if the two values aren't similar enough
            but needs to be reported as a delete plus an add.
            </returns>
        </member>
        <member name="T:DiffLib.ISimilarityComparer`1">
            <summary>
            This interface must be implemented by classes that will do similarity-calculation
            for use with the <see cref="T:DiffLib.AlignedDiff`1"/> class.
            </summary>
            <typeparam name="T">
            The type of elements being compared.
            </typeparam>
        </member>
        <member name="M:DiffLib.ISimilarityComparer`1.Compare(`0,`0)">
            <summary>
            Does a similarity comparison between the two values and returns their
            similarity, a value ranging from 0.0 to 1.0, where 0.0 means they're
            completely different and 1.0 means they have the same value.
            </summary>
            <param name="value1">
            The first value to compare.
            </param>
            <param name="value2">
            The second value to compare.
            </param>
            <returns>
            A value ranging from 0.0 to 1.0, where 0.0 means they're
            completely different and 1.0 means they have the same value.
            </returns>
        </member>
        <member name="T:DiffLib.LongestCommonSubstring`1">
            <summary>
            This class implements the LCS algorithm, to find the longest common substring that exists
            in two collections, and return the locations of those substrings.
            </summary>
            <typeparam name="T">
            The types of elements in the collections being compared.
            </typeparam>
        </member>
        <member name="M:DiffLib.LongestCommonSubstring`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DiffLib.LongestCommonSubstring`1"/> class
            using the default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> instance for the
            <typeparamref name="T"/> type.
            </summary>
            <param name="collection1">
            The first collection of items.
            </param>
            <param name="collection2">
            The second collection of items.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="collection1"/> is <c>null</c>.</para>
            <para>- or -</para>
            <para><paramref name="collection2"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:DiffLib.LongestCommonSubstring`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DiffLib.LongestCommonSubstring`1"/> class.
            </summary>
            <param name="collection1">
            The first collection of items.
            </param>
            <param name="collection2">
            The second collection of items.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that will be used to compare elements from
            <paramref name="collection1"/> with elements from <paramref name="collection2"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="collection1"/> is <c>null</c>.</para>
            <para>- or -</para>
            <para><paramref name="collection2"/> is <c>null</c>.</para>
            <para>- or -</para>
            <para><paramref name="comparer"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:DiffLib.LongestCommonSubstring`1.Find">
            <summary>
            Finds the longest common substring and returns its position in the two collections, and
            its length, or <c>null</c> if no such common substring can be located.
            </summary>
            <returns>
            A <see cref="T:DiffLib.LongestCommonSubstringResult"/> containing the positions of the two substrings, one position
            for each collection, both 0-based, and the length of the substring. If no common substring can be found, <c>null</c>
            will be returned.
            </returns>
        </member>
        <member name="M:DiffLib.LongestCommonSubstring`1.Find(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Finds the longest common substring and returns its position in the two collections, and
            its length, or <c>null</c> if no such common substring can be located.
            </summary>
            <param name="lower1">
            The starting position in the first collection, 0-based. Included in the search.
            </param>
            <param name="upper1">
            The ending position in the first collection, 0-based. <b>Not</b> included in the search.
            </param>
            <param name="lower2">
            The starting position in the second collection, 0-based. Included in the search.
            </param>
            <param name="upper2">
            The ending position in the second collection, 0-based. <b>Not</b> included in the search.
            </param>
            <returns>
            A <see cref="T:DiffLib.LongestCommonSubstringResult"/> containing the positions of the two substrings, one position
            for each collection, both 0-based, and the length of the substring. If no common substring can be found, <c>null</c>
            will be returned.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="lower1"/> is less than 0.</para>
            <para>- or -</para>
            <para><paramref name="lower1"/> is greater than <paramref name="upper1"/>.</para>
            <para>- or -</para>
            <para><paramref name="upper1"/> is greater than the length of the first collection.</para>
            <para>- or -</para>
            <para><paramref name="lower2"/> is less than 0.</para>
            <para>- or -</para>
            <para><paramref name="lower2"/> is greater than <paramref name="upper2"/>.</para>
            <para>- or -</para>
            <para><paramref name="upper2"/> is greater than the length of the second collection.</para>
            </exception>
        </member>
        <member name="T:DiffLib.LongestCommonSubstringResult">
            <summary>
            This class holds the result of calling <see cref="M:DiffLib.LongestCommonSubstring`1.Find"/>.
            </summary>
        </member>
        <member name="M:DiffLib.LongestCommonSubstringResult.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:DiffLib.LongestCommonSubstringResult"/>.
            </summary>
            <param name="positionInCollection1">
            The position in the first collection, 0-based.
            </param>
            <param name="positionInCollection2">
            The position in the second collection, 0-based.
            </param>
            <param name="length">
            The length of the common substring.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="positionInCollection1"/> is negative.</para>
            <para>- or -</para>
            <para><paramref name="positionInCollection2"/> is negative.</para>
            <para>- or -</para>
            <para><paramref name="length"/> is zero or negative.</para>
            </exception>
        </member>
        <member name="M:DiffLib.LongestCommonSubstringResult.Equals(DiffLib.LongestCommonSubstringResult)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:DiffLib.LongestCommonSubstringResult.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:DiffLib.LongestCommonSubstringResult.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:DiffLib.LongestCommonSubstringResult.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:DiffLib.LongestCommonSubstringResult.PositionInCollection1">
            <summary>
            The position in the first collection, 0-based.
            </summary>
        </member>
        <member name="P:DiffLib.LongestCommonSubstringResult.PositionInCollection2">
            <summary>
            The position in the second collection, 0-based.
            </summary>
        </member>
        <member name="P:DiffLib.LongestCommonSubstringResult.Length">
            <summary>
            The length of the common substring.
            </summary>
        </member>
        <member name="T:DiffLib.AlignedDiff`1">
            <summary>
            This class implements a slightly more advanced diff algorithm than <see cref="T:DiffLib.Diff`1"/> by
            taking the output from <see cref="T:DiffLib.Diff`1"/> and attempting to align individual elements inside
            replace-blocks. This is mostly suitable for text file diffs.
            </summary>
            <typeparam name="T">
            The types of elements in the collections being compared.
            </typeparam>
        </member>
        <member name="M:DiffLib.AlignedDiff`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0},DiffLib.ISimilarityComparer{`0},DiffLib.IAlignmentFilter{`0})">
            <summary>
            Initializes a new instance of <see cref="T:DiffLib.AlignedDiff`1"/>.
            </summary>
            <param name="collection1">
            The first collection of items.
            </param>
            <param name="collection2">
            The second collection of items.
            </param>
            <param name="equalityComparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that will be used to compare elements from
            <paramref name="collection1"/> with elements from <paramref name="collection2"/>.
            </param>
            <param name="similarityComparer">
            The <see cref="T:DiffLib.ISimilarityComparer`1"/> that will be used to attempt to align elements
            inside blocks that consists of elements from the first collection being replaced
            with elements from the second collection.
            </param>
            <param name="alignmentFilter">
            The <see cref="T:DiffLib.ISimilarityComparer`1"/> that will be used to determine if
            two aligned elements are similar enough to be report them as a change from
            one to another, or to report them as one being deleted and the other added in
            its place.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="collection1"/> is <c>null</c>.</para>
            <para>- or -</para>
            <para><paramref name="collection2"/> is <c>null</c>.</para>
            <para>- or -</para>
            <para><paramref name="equalityComparer"/> is <c>null</c>.</para>
            <para>- or -</para>
            <para><paramref name="alignmentFilter"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:DiffLib.AlignedDiff`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:DiffLib.AlignedDiff`1.Generate">
            <summary>
            Generates the diff, one line of output at a time.
            </summary>
            <returns>
            A collection of <see cref="T:DiffLib.AlignedDiffChange`1"/> objects, one for
            each line in the first or second collection (sometimes one instance for a line
            from both, when lines are equal or similar.)
            </returns>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage
            </summary>
            <example><code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example><code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>
            </summary>
            <example><code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
             and this method is used to notify that some property value changed
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly
            (e.g. via reflection, in external library), so this symbol
            will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused
            (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly
            when marked with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/>
            or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used</summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled
            when the invoked method is on stack. If the parameter is a delegate,
            indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated
            while the method is executed
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
            <example><code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder
            within a web project. Path can be relative or absolute,
            starting from web root (~)
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC controller. If applied to a method,
            the MVC controller name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, Object)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC partial view. If applied to a method,
            the MVC partial view name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcSupressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling all inspections
            for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if one of the conditions is satisfied. 
            To set the condition, mark one of the parameters with <see cref="T:JetBrains.Annotations.AssertionConditionAttribute"/> attribute
            </summary>
            <seealso cref="T:JetBrains.Annotations.AssertionConditionAttribute"/>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. 
            The method itself should be marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute"/> attribute.
            The mandatory argument of the attribute is the assertion type.
            </summary>
            <seealso cref="T:JetBrains.Annotations.AssertionConditionType"/>
        </member>
        <member name="M:JetBrains.Annotations.AssertionConditionAttribute.#ctor(JetBrains.Annotations.AssertionConditionType)">
            <summary>
            Initializes new instance of AssertionConditionAttribute
            </summary>
            <param name="conditionType">Specifies condition type</param>
        </member>
        <member name="P:JetBrains.Annotations.AssertionConditionAttribute.ConditionType">
            <summary>
            Gets condition type
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisifes the condition, then the execution continues. 
            Otherwise, execution is assumed to be halted
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
            <summary>
            Indicates that the marked parameter should be evaluated to true
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
            <summary>
            Indicates that the marked parameter should be evaluated to false
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
            <summary>
            Indicates that the marked parameter should be evaluated to null value
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>
            Indicates that the marked parameter should be evaluated to not null value
            </summary>
        </member>
        <member name="T:DiffLib.StringSimilarityComparer">
            <summary>
            This class implements <see cref="T:DiffLib.ISimilarityComparer`1"/> for strings, doing a very basic "diff" between the two,
            and calculating how much of the text occurs in both.
            </summary>
        </member>
        <member name="M:DiffLib.StringSimilarityComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DiffLib.StringSimilarityComparer"/> class.
            </summary>
        </member>
        <member name="M:DiffLib.StringSimilarityComparer.Compare(System.String,System.String)">
            <summary>
            Does a similarity comparison between the two values and returns their
            similarity, a value ranging from 0.0 to 1.0, where 0.0 means they're
            completely different and 1.0 means they have the same value.
            </summary>
            <param name="value1">
            The first value to compare.
            </param>
            <param name="value2">
            The second value to compare.
            </param>
            <returns>
            A value ranging from 0.0 to 1.0, where 0.0 means they're
            completely different and 1.0 means they have the same value.
            </returns>
        </member>
        <member name="T:DiffLib.StringAlignmentFilter">
            <summary>
            This class implements <see cref="T:DiffLib.ISimilarityComparer`1"/> for strings, doing a very basic "diff" between the two,
            and calculating how much of the text occurs in both.
            </summary>
        </member>
        <member name="M:DiffLib.StringAlignmentFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DiffLib.StringAlignmentFilter"/> class.
            </summary>
        </member>
        <member name="M:DiffLib.StringAlignmentFilter.#ctor(DiffLib.StringSimilarityFilterPredicate)">
            <summary>
            Initializes a new instance of the <see cref="T:DiffLib.StringAlignmentFilter"/> class.
            </summary>
            <param name="diffPredicate">
            The diff predicate used to determine if the strings are
            similar enough (see <see cref="T:DiffLib.StringSimilarityFilterPredicate"/> for details.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="diffPredicate"/> is <c>null</c>.</exception>
        </member>
        <member name="M:DiffLib.StringAlignmentFilter.CanAlign(System.String,System.String)">
            <summary>
            Determines if the two values are similar enough to align them
            as a change, instead of not aligning them but reporting them
            as a delete plus an add instead.
            </summary>
            <param name="value1">
            The first value to compare against <paramref name="value2"/>.
            </param>
            <param name="value2">
            The second value to compare against <paramref name="value1"/>.
            </param>
            <returns>
            <c>true</c> if the two values are similar enough to report
            them as a change; false if the two values aren't similar enough
            but needs to be reported as a delete plus an add.
            </returns>
        </member>
        <member name="T:DiffLib.StringSimilarityFilterPredicate">
            <summary>
            This delegate is used by <see cref="T:DiffLib.StringAlignmentFilter"/> to
            determine if the two strings are similar enough to report them
            as a change, instead of as a delete plus and add.
            </summary>
            <param name="value1">
            The first string to compare.
            </param>
            <param name="value2">
            The second string to compare.
            </param>
            <param name="diff">
            The diff between <paramref name="value1"/> and <paramref name="value2"/>.
            </param>
            <returns>
            <c>true</c> if the strings are similar enough (reported as a change);
            otherwise, <c>false</c> (reported as a delete plus an add.)
            </returns>
        </member>
    </members>
</doc>
